<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Harald Pehl]]></title>
  <link href="http://hpehl.info/atom.xml" rel="self"/>
  <link href="http://hpehl.info/"/>
  <updated>2013-05-24T15:02:45+02:00</updated>
  <id>http://hpehl.info/</id>
  <author>
    <name><![CDATA[Harald Pehl]]></name>
    <email><![CDATA[harald.pehl@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Web Components]]></title>
    <link href="http://hpehl.info/web-components.html"/>
    <updated>2013-05-17T12:57:00+02:00</updated>
    <id>http://hpehl.info/web-components</id>
    <content type="html"><![CDATA[<p>I recently watched <a href="https://plus.google.com/+EricBidelman/">Eric Bidelmans</a> <a href="http://www.youtube.com/watch?v=fqULJBBEVQE">presentation</a> on
Web Components at Google IO 13. <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html">Web Components</a>
is an effort to bring true modularisation to web development. For the first time you&#8217;ll have encapsulation at the
browser level. No more mess with duplicate IDs or mixed CSS style rules. <!-- more -->The building blocks of Web
Components are</p>

<ul>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html">Shadow DOM</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html">Templates</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/index.html">Custom Elements</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/imports/index.html">HTML Imports</a></li>
</ul>


<p>If you think this is a long way of and available in a few years, then you&#8217;re completely wrong! You can use Web Components
today. And they are already used by the browser vendors under the hood.
This <a href="http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/">article</a> from
<a href="http://glazkov.com/about/">Dimitri Glazkov</a> opened my eyes. Many of the new HTML5 elements like
<code>&lt;input type="range"/&gt;</code>, <code>&lt;input type="date"/&gt;</code> or <code>&lt;video/&gt;</code> are implemented using Web Compontents. You can see the
markup behind those elements if you enable Shadow DOM in Chrome Canary. The screenshot below shows the internal markup
of an <code>&lt;input type="date"/&gt;</code> element:</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/input_type_date_shadow_dom.png"></figure></p>

<h1>V-Card Sample</h1>

<p>If you want to start creating your own Web Components, I strongly recommend to take a look at
<a href="http://www.polymer-project.org/">Polymer</a>. It&#8217;s a framework for developing Web Components today. It fills out missing
browser implementation with so called polyfills.</p>

<p>Let&#8217;s jump into Web Component development and build a <code>v-card</code> element which renders a business card. The following
code shows the host page containing the custom <code>v-card</code> element. It expects a fullname, a title, several
links and a logo. The parameters are wrapped in regular HTML elements. The class names are taken from the
<a href="http://microformats.org/wiki/hcard">hCard microformat</a> and are used later to select the relevant information.</p>

<figure class='code'><figcaption><span>Host Page  (host.html)</span> <a href='http://hpehl.info/downloads/code/webcomponents/host.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/path/to/polymer.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;v-card.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;v</span><span class="na">-card</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;fn&quot;</span><span class="nt">&gt;</span>Harald Pehl<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;position&quot;</span><span class="nt">&gt;</span>Senior Software Engineer<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;url&quot;</span> <span class="na">href=</span><span class="s">&quot;http://hpehl.info&quot;</span><span class="nt">&gt;</span>http://hpehl.info<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;twitter&quot;</span> <span class="na">href=</span><span class="s">&quot;https://twitter.com/haraldpehl&quot;</span><span class="nt">&gt;</span>@haraldpehl<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;gplus&quot;</span> <span class="na">href=</span><span class="s">&quot;https://plus.google.com/u/0/112941298216109713269/&quot;</span><span class="nt">&gt;</span>+Harald Pehl<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;logo&quot;</span> <span class="na">src=</span><span class="s">&quot;http://upload.wikimedia.org/wikipedia/it/archive/c/cb/20120516124751!Red_hat_logo.png&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="err">&lt;</span>/v-card&gt;
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>v-card</code> implementation uses its own CSS styles and markup. Thanks to Shadow DOM they don&#8217;t conflict with the
host page. The data for the business card is pulled from the host page using the <code>&lt;content&gt;</code> element and CSS selectors.
Finally the call to <code>Polymer.register(this)</code> takes care of all the polyfill magic to make this work accross all
modern browsers.</p>

<figure class='code'><figcaption><span>Custom Element Implementation  (v-card.html)</span> <a href='http://hpehl.info/downloads/code/webcomponents/v-card.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">name=</span><span class="s">&quot;v-card&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;template&gt;</span>
</span><span class='line'>        <span class="nt">&lt;style&gt;</span>
</span><span class='line'>            <span class="nt">header</span><span class="o">,</span> <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">ol</span><span class="o">,</span> <span class="nt">li</span><span class="o">,</span> <span class="nt">img</span> <span class="p">{</span>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span> <span class="p">{</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">normal</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">section</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">background</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>                <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>                <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">4px</span> <span class="m">2px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="o">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>                <span class="k">width</span><span class="o">:</span> <span class="m">30</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>                <span class="k">height</span><span class="o">:</span> <span class="m">15</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="p">;</span>
</span><span class='line'>                <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>                <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>                <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>                <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'>                <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">header</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">background-color</span><span class="o">:</span> <span class="m">#555</span><span class="p">;</span>
</span><span class='line'>                <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>                <span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>                <span class="k">padding</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span> <span class="m">1</span><span class="n">rem</span> <span class="m">1</span><span class="n">rem</span> <span class="m">2</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">header</span> <span class="nt">h1</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nt">header</span> <span class="nt">h2</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">ol</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="o">.</span><span class="m">8</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nt">li</span> <span class="p">{</span> <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nc">.logo_container</span> <span class="p">{</span> <span class="k">margin-right</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section&gt;</span>
</span><span class='line'>            <span class="nt">&lt;header&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h1&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;span.fn&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h2&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;span.position&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ol&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;a.url&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;a.twitter&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;a.gplus&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ol&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;logo_container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;img.logo&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>        <span class="nx">Polymer</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/element&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below you can see the <code>v-card</code> Web Component in action. Please note that I&#8217;m unsing CSS3 flexbox to render the
business card. Support for flexbox is somewhat <a href="http://caniuse.com/#feat=flexbox">limited</a>. Chrome should make
no problems, for Firefox you might have to enable <code>layout.css.flexbox.enabled</code> in about:config. All other browsers
will most likely have problems rendering the business card. If that&#8217;s the case here&#8217;s a
<a href="http://hpehl.info/images/posts/v-card_reference.png">reference representation</a>.</p>

<script src="http://hpehl.info/javascripts/polymer.min.js" type="text/javascript"></script>


<p><link rel="import" href="http://hpehl.info/downloads/code/webcomponents/v-card.html"></p>

<p><v-card>
  <span class="fn" style="color: inherit">Harald Pehl</span>
  <span class="position">Senior Software Engineer</span>
  <a class="url" href="http://hpehl.info">http://hpehl.info</a>
  <a class="twitter" href="https://twitter.com/haraldpehl">@haraldpehl</a>
  <a class="gplus" href="https://plus.google.com/u/0/112941298216109713269/">+Harald Pehl</a>
  <img class="logo" src="http://upload.wikimedia.org/wikipedia/it/archive/c/cb/20120516124751!Red_hat_logo.png" width="64" height="64" style="-webkit-border-radius: 0; border-radius: none; -webkit-box-shadow: none; box-shadow: none; border: none;">
</v-card></p>

<p>I hope this simple example shows the potential behind Web Components. I&#8217;m convinced Web Components are the future of
client side web development. If you want to dive deeper into the subject here is a list of useful resources:</p>

<ul>
<li><a href="http://www.youtube.com/watch?v=0g0oOOT86NY">Web Components in Action</a>: Google IO session about Polymer</li>
<li><a href="http://www.x-tags.org/">X-Tags</a>: Polymer counterpart from Mozilla</li>
<li><a href="http://www.dartlang.org/articles/web-ui/">Web UI</a>: Darts implementation for Web Components</li>
<li>Shadow DOM series on HTML5 Rocks:

<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM 101</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/">Shadow DOM 201</a>: CSS and Styling</li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/">Shadow DOM 301</a>: Advanced Concepts &amp; DOM APIs</li>
</ul>
</li>
<li><a href="http://html5-demos.appspot.com/static/shadowdom-visualizer/index.html">Shadow DOM Visualizer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to efficiently write GWT Generators]]></title>
    <link href="http://hpehl.info/how-to-efficiently-write-gwt-generators.html"/>
    <updated>2013-05-07T10:23:00+02:00</updated>
    <id>http://hpehl.info/how-to-efficiently-write-gwt-generators</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved Blog to GitHub Pages]]></title>
    <link href="http://hpehl.info/moved-blog-to-github-pages.html"/>
    <updated>2013-05-02T13:55:00+02:00</updated>
    <id>http://hpehl.info/moved-blog-to-github-pages</id>
    <content type="html"><![CDATA[<p>For over three years I was hosting my blog at Blogger.com. Although publishing was quite easy I never was really happy
with the layout and the support for customization.<!--more --></p>

<p>I was looking for a new provider to host my blog. In particular I wanted to</p>

<ul>
<li>write my posts using <a href="http://daringfireball.net/projects/markdown/">markdown</a></li>
<li>be able to have regular pages (like projects, about me, &#8230;)</li>
<li>have full control over the look and feel of my blog</li>
<li>have support for responsive design</li>
<li>host the blog with my own top level domain</li>
</ul>


<p>After some research I stumbled across <a href="http://pages.github.com/">GitHub Pages</a> in combination
with <a href="http://jekyllrb.com/">Jekyll</a> and <a href="http://octopress.org/">Octopress</a>. The setup is really easy and there are
plenty of resources and documentation around Jekyll and Octopress.</p>

<p>As my blog contains a manageable number of posts, I decided to manually migrate them to markdown. But there is also
support for <a href="https://github.com/mojombo/jekyll/wiki/blog-migrations#blogger-blogspot">automatic migration</a>. I didn&#8217;t
migrate the comments of my blog and started from scratch using <a href="http://disqus.com/">Disqus</a>.</p>

<p>I invested quite some time on the look and feel for my new blog. To a great extent I was inspired by
the <a href="https://github.com/amelandri/darkstripes">darkstripes</a> theme and the blog
of <a href="http://melandri.net/">Alessandro Melandri</a>. My navigation was influenced by the website
of <a href="http://www.thibaultjorge.com/en">Thibault Jorge</a>.</p>

<p>The result of the migration is what you&#8217;re looking at. I hope you like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosted CI Services]]></title>
    <link href="http://hpehl.info/hosted-ci-services.html"/>
    <updated>2013-04-09T15:31:00+02:00</updated>
    <id>http://hpehl.info/hosted-ci-services</id>
    <content type="html"><![CDATA[<p>I was looking for a hosted continuous integration service to build my GitHub projects. My requirements are painless
GitHub integration, easy setup and a simple and straightforward UI. I looked at two services:
<a href="http://drone.io/">Drone.io</a> and <a href="https://travis-ci.org/">Travis CI</a>. In this post I will outline my very personal
experience with it.<!-- more --></p>

<p>Both Drone.io and Travis CI offer very good GitHub integration. It&#8217;s fairly simple to connect your GitHub projects.
Especially Drone.io does a very good job. Link your GitHub account, choose your project and language and you&#8217;re ready
to go.</p>

<p>Unfortunatley neither Drone.io nor Travis CI can deploy artifacts to external repositories like OSS Sonatype out of
the box (though there&#8217;s a <a href="https://gist.github.com/neothemachine/4060735">workaround</a> for Travis). By now I&#8217;m building
and deploying dependent projects manually from my box.</p>

<p>To sum it up these are pros/cons for me:</p>

<ol>
<li>Drone.io

<ul>
<li>Pros

<ul>
<li>Very simple and easy to use UI.</li>
<li>Great GitHub integration</li>
<li>Supports alos BitBucket and GoogleCode</li>
</ul>
</li>
<li>Cons

<ul>
<li>Once a job / project was setup you cannot delete it anymore (as least I don&#8217;t know how?)</li>
<li>Limited configuration options</li>
</ul>
</li>
</ul>
</li>
<li>Travis CI

<ul>
<li>Pros

<ul>
<li>Powerful configuration options (.travis.yml)</li>
<li>Great range of supported languages</li>
<li>Supports multiple JVM</li>
</ul>
</li>
<li>Cons

<ul>
<li>Some extra configuration steps to get started</li>
</ul>
</li>
</ul>
</li>
</ol>


<p>Feel free to totally disagree with me or comment your own experience.</p>

<h3>Update</h3>

<p>You can delete a project in Drone.io by going to your project&#8217;s Settings &gt; Repository page. Thanks for the hint Brad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing around with Dart Isolates]]></title>
    <link href="http://hpehl.info/playing-around-with-dart-isolates.html"/>
    <updated>2013-04-08T22:26:00+02:00</updated>
    <id>http://hpehl.info/playing-around-with-dart-isolates</id>
    <content type="html"><![CDATA[<p>I was looking for a way to implement some kind of dynamic plug-in system in Dart. The idea was to load Dart code on
demand into an isolate using <a href="http://api.dartlang.org/docs/releases/latest/dart_isolate.html#spawnUri">spawnUri()</a>.
It turns out that this function is implemented in the Dart VM but neither in Dartium nor does it compile down to
JavaScript.<!-- more --></p>

<p>Falling back to <a href="http://api.dartlang.org/docs/releases/latest/dart_isolate.html#spawnFunction">spawnFunction()</a> works
as expected in the browser but it turns out that isolates are not allowed to access / change the DOM. This reduces
isolates to dumb worker functions. Plug-ins which make contributions to the UI are not possible using this approach.</p>

<p>I created some test scripts for the browser and the VM to test the possibilities you have with isolates. You can
find them at GitHub: <a href="https://github.com/hpehl/dart-isolates">https://github.com/hpehl/dart-isolates</a>. Let me know what
you think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Independent JBoss Admin Console]]></title>
    <link href="http://hpehl.info/independent-jboss-admin-console.html"/>
    <updated>2013-03-05T21:43:00+01:00</updated>
    <id>http://hpehl.info/independent-jboss-admin-console</id>
    <content type="html"><![CDATA[<p>We&#8217;re currently working on a new feature for the JBoss Admin Console. The console should become independent from the
rest of the JBoss AS distribution. As the console is built with GWT and &#8220;merely&#8221; consists of static resources like
HTML, JavaScript and CSS, the idea is to have a dedicated host which serves these resources. When loading the console
the user can manage a list of server instances and chooses the one he likes to connect to. The server instances are
stored in the browsers <a href="http://www.w3.org/TR/webstorage/">local storage</a>, so they will be available the next time the
console is launched:<!-- more --></p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/select_server_instance.png" title="Connect to server" ></figure></p>

<p>Using this kind of setup brings us several advantages:</p>

<ul>
<li>We can update the console independently from the rest of the AS code base</li>
<li>We can deploy the console to various (web)app stores like Firefox Marketplace or Chrome Web Store</li>
<li>We can have different console versions with different feature sets (nightly, beta, stable)</li>
<li>Using one console you can connect to different server instances running different setups (development, staging, production)</li>
</ul>


<h1>CORS</h1>

<p>The console talks to the domain controller (DC) using the HTTP management API. Now when the console and the DC live
on different hosts, the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a> (SOP) throws a monkey
wrench in our efforts. Luckily we&#8217;re not the first ones confronted with this problem. There are several ways to solve
SOP restrictions:</p>

<ul>
<li>Server Side Proxies</li>
<li><a href="http://en.wikipedia.org/wiki/JSONP">JSON with padding</a> (JSONP)</li>
<li><a href="http://www.w3.org/TR/cors/">Cross-Origin Resource Sharing</a> (CORS)</li>
</ul>


<h2>Client</h2>

<p>According to <a href="http://caniuse.com/#search=cors">caniuse.com</a> CORS is implemented in most of the browsers. CORS knows
two different types of requests.</p>

<ol>
<li><p>Simple requests:</p>

<p> A request that only uses <code>GET</code> or <code>POST</code>. If <code>POST</code> is used to send data to the server, the content type of the data
sent to the server with the HTTP <code>POST</code> request is one of <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>
or <code>text/plain</code>. The request must not contain custom headers (such as <code>X-Modified</code>, etc.)</p></li>
<li><p>Preflighted requests</p>

<p> A request that uses methods other than <code>GET</code> or <code>POST</code>. Also, if <code>POST</code> is used to send request data with a
content type other than <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code> or <code>text/plain</code>, e.g. if the
<code>POST</code> request sends an XML payload to the server using <code>application/xml</code> or <code>text/xml</code>, then the request is a
preflighted request. Furthermore if the request contains custom headers, it&#8217;s preflighted.</p></li>
</ol>


<p>Unlike simple requests, preflighted requests first send an HTTP <code>OPTIONS</code> request header to the resource on the other
domain, in order to determine whether the actual request is safe to send. Since the console uses <code>POST</code> with a
content type of <code>application/dmr-encoded</code> all requests are preflighted requests. This will be important when looking
at the server side.</p>

<p>Common to all requests is that the browser adds the request header <code>Origin</code>. The value of this header is the site
that served the page. For example, suppose a page on http://www.example-social-network.com attempts to access a
user&#8217;s data in online-personal-calendar.com. If the browser implements CORS, the following request header would be sent:</p>

<pre><code>Origin: http://www.example-social-network.com
</code></pre>

<h2>Server</h2>

<p>It is up to the server to decide which origins are allowed. When the server accepts cross-origin requests, it sends an
<code>Access-Control-Allow-Origin</code> header in its response. The value of the header indicates what origin sites are allowed.
For example, a response to the previous request would contain the following:</p>

<pre><code>Access-Control-Allow-Origin: http://www.example-social-network.com.
</code></pre>

<p>For the JBoss AS this implies changes to the class <code>org.jboss.as.domain.http.server.DomainApiHandler</code>. This class
handles HTTP requests to the management API. The modified version accepts preflighted <code>OPTIONS</code> requests and sets the
relevant response headers.</p>

<h2>Authentication</h2>

<p>The console uses digest authentication. This must continue to work when doing cross-origin requests. By default,
in cross-origin <code>XMLHttpRequest</code> invocations, browsers will not send credentials. A specific flag called
<code>withCredentials</code> has to be set on the <code>XMLHttpRequest</code> object when it is invoked. Unfortunately GWTs implementation
of the JavaScript <code>XMLHttpRequest</code> object does
<a href="https://code.google.com/p/google-web-toolkit/issues/detail?id=7677">not yet implement</a> this flag. For the time being
we need to include <code>withCredentials</code> by ourselves.</p>

<p>The next challenge is to trigger the login dialog when accessing protected resources. Unfortunately when it comes to
authentication browsers handle CORS quite differently. There are some workarounds depending on which browser is used:</p>

<ul>
<li>Chrome <a href="http://blog.chromium.org/2011/06/new-chromium-security-features-june.html">prevents basic authentication from a different origin as a phishing attack</a> period.
The only way to get around that is to start Chrome using the command line option <code>--allow-cross-origin-auth-prompt</code>.</li>
<li>Firefox makes no problems when it comes to display the login dialog (well done guys!)</li>
<li>Safari won&#8217;t show the login dialog. You can get around that by inserting a hidden <code>&lt;iframe&gt;</code> element linking to the
protected url. This will trigger the authentication popup and once the user has authenticated, you can execute direct
<code>XMLHttpRequests</code> as usual.</li>
<li>Internet Explorer somewhat support CORS in IE8 and IE9 using the <code>XDomainRequest</code> object (but has limitations).</li>
</ul>


<p>Finally there&#8217;s an issue related to preflighted <code>OPTIONS</code> requests on the server side. According to the specification
those requests must exclude user credentials:</p>

<blockquote><p>Otherwise, make a preflight request [&#8230;] with the following additional constraints:<br/>    - Exclude user credentials.</p><footer><strong>W3C CORS specification</strong> <cite><a href='http://www.w3.org/TR/cors/#cross-origin-request-with-preflight-0'>www.w3.org/TR/cors/&hellip;</a></cite></footer></blockquote>


<p>Hence these requests are blocked by the server with &#8220;401 Unauthorized&#8221;. As a workaround the authenticators in the AS
code base must let pass preflighted <code>OPTIONS</code> requests.</p>

<h2>Status Quo</h2>

<p>At the moment a first preview of an independent console is available at
OpenShift: <a href="https://console-hpehl.rhcloud.com">https://console-hpehl.rhcloud.com</a>. Please note that you must have a
CORS enabled server instance running in order to connect from the console. You can build one by yourself using the
&#8220;cors&#8221; branch of the AS code base: <a href="https://github.com/hpehl/jboss-as/tree/cors">https://github.com/hpehl/jboss-as/tree/cors</a>.
Follow the steps in the <a href="https://github.com/hpehl/jboss-as/tree/cors#readme">README</a> to build the server.</p>

<p>Due to the limitations regarding authentication and CORS, the solution described here will only work in Firefox and
Safari. If you want to use Chrome make sure to use the <code>--allow-cross-origin-auth-prompt</code> command line option.</p>

<h2>Client Library</h2>

<p>I stumbled upon an interesting project on GitHub: <a href="https://github.com/pazguille/CORS">https://github.com/pazguille/CORS</a>. Seems to have support for IE8+,
offers an easy to use API and hides the awkward implementation details. I will evaluate this and try to make a GWT port.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Job]]></title>
    <link href="http://hpehl.info/new-job.html"/>
    <updated>2012-10-02T12:52:00+02:00</updated>
    <id>http://hpehl.info/new-job</id>
    <content type="html"><![CDATA[<p>Today is my first day in my new job at RedHat. I&#8217;m excited to join the EAP core team and looking forward to the things to come&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Velocity to generate code in GWT]]></title>
    <link href="http://hpehl.info/how-to-use-velocity-to-generate-code-in-gwt.html"/>
    <updated>2012-01-28T21:44:00+01:00</updated>
    <id>http://hpehl.info/how-to-use-velocity-to-generate-code-in-gwt</id>
    <content type="html"><![CDATA[<p>The JSON/XML mapper <a href="https://github.com/hpehl/piriti">Piriti</a> is heavily based on deferred binding and code generation.
As I started to implement code generators in Piriti I looked around how other projects deal with it and read through
the <a href="https://developers.google.com/web-toolkit/doc/latest/DevGuideCodingBasicsDeferred">official documentation</a> on the
GWT site. The usual way to generate code is to extend <code>com.google.gwt.core.ext.Generator</code> and then call
<code>GeneratorContext.tryCreate(TreeLogger, String, String)</code>. The returned PrintWriter is then often wrapped into
some kind of <a href="https://code.google.com/p/google-web-toolkit/source/browse/trunk/user/src/com/google/gwt/uibinder/rebind/IndentedWriter.java">IndentedWriter</a>
like the one used by GWT itself. This class adds methods to indent and unindent code and supports <code>printf()</code> like
behaviour. Finally the writer is used to generate all code. <!-- more -->This in turn results in code which looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s %s = null;&quot;</span><span class="o">,</span> <span class="n">parameterizedValueType</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;List&lt;Element&gt; %s = filterElements(element.selectNodes(\&quot;%s\&quot;));&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">elements</span><span class="o">,</span> <span class="n">property</span><span class="o">.</span><span class="na">getPathOrName</span><span class="o">());</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;if (!%s.isEmpty()) {&quot;</span><span class="o">,</span> <span class="n">elements</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s = new %s&lt;%s&gt;();&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">collectionImplementation</span><span class="o">,</span> <span class="n">elementType</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">property</span><span class="o">.</span><span class="na">isConverter</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// even more writer.write() statements</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;for (Element currentElement : %s) {&quot;</span><span class="o">,</span> <span class="n">elements</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s currentValue = null;&quot;</span><span class="o">,</span> <span class="n">elementType</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;XmlReader&lt;%1$&gt;; currentReader = xmlRegistry.getReader(%1$s.class);&quot;</span><span class="o">,</span> <span class="n">elementType</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;if (currentReader != null) {&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;currentValue = currentReader.read(currentElement);&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;if (currentValue != null) {&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s.add(currentValue);&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can&#8217;t help, but this code somehow reminds me of the old times, where we generated HTML code in servlets.
This approach might work as long as the amount of generated code is small. In Piriti the code generation process
is somewhat complex and distributed over several classes. Changing the generated code became very difficult and
error-prone. Only the correct use of writer.indent() and writer.outdent() is not a trivial task. To some extent
this problem can be solved by the use of an abstract base class, which contains common code. The generated class
would extend from the abstract base class. But at the end of the day you have to generate some code in the concrete
subclass.</p>

<h1>Velocity to the rescue</h1>

<p><a href="http://velocity.apache.org/engine/releases/velocity-1.7/">Velocity</a> is a Java-based template engine. It permits
anyone to use a simple yet powerful template language to reference objects defined in Java code. Velocity supports
for loops, if-then-else conditions and custom macros. Templates can include other templates. This way you can put
common code in extra templates and reuse it in other templates. Velocity is mainly used in web projects for HTML
generation. Another common use case is to generate email bodies. But there&#8217;s no reason not to use Velocity for code
generation in GWT.</p>

<p>Doing so the above code snippet becomes something like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$parameterizedValueType</span> <span class="n">$value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="n">$elements</span> <span class="o">=</span> <span class="n">filterElements</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">selectNodes</span><span class="o">(</span><span class="s">&quot;$property.pathOrName&quot;</span><span class="o">));</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">$</span><span class="o">{</span><span class="n">elements</span><span class="o">}.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">$collectionImplementation</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">$elementType</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="err">#</span><span class="k">if</span> <span class="o">(</span><span class="n">$property</span><span class="o">.</span><span class="na">converter</span><span class="o">)</span> <span class="err">#</span><span class="n">createConverter</span><span class="o">()</span> <span class="err">#</span><span class="n">end</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">currentElement</span> <span class="o">:</span> <span class="n">$elements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">$elementType</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">XmlReader</span><span class="o">&lt;</span><span class="n">$elementType</span><span class="o">&gt;</span> <span class="n">currentReader</span> <span class="o">=</span> <span class="n">xmlRegistry</span><span class="o">.</span><span class="na">getReader</span><span class="o">(</span><span class="n">$</span><span class="o">{</span><span class="n">elementType</span><span class="o">}.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentReader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentValue</span> <span class="o">=</span> <span class="n">currentReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">currentElement</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentValue</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$</span><span class="o">{</span><span class="n">value</span><span class="o">}.</span><span class="na">add</span><span class="o">(</span><span class="n">currentValue</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compare the two code snippets you get the idea! The velocity based code is much more readable. As you can see
the velocity template contains variable references like $elements. Before the template is rendered all necessary
variables must be put into the so-called Velocity context which is more or less a big map. If the variable refers to
a java object you can use its properties and even call methods.</p>

<p>To use Velocity for code generation you have to setup the Velocity engine, create the Velocity context and merge the
template. In Piriti the engine is configured with the following properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">velocimacro</span><span class="o">.</span><span class="na">library</span> <span class="o">=</span> <span class="n">name</span><span class="o">/</span><span class="n">pehl</span><span class="o">/</span><span class="n">piriti</span><span class="o">/</span><span class="n">rebind</span><span class="o">/</span><span class="n">propertyMacros</span><span class="o">.</span><span class="na">vm</span>
</span><span class='line'><span class="n">runtime</span><span class="o">.</span><span class="na">log</span><span class="o">.</span><span class="na">logsystem</span><span class="o">.</span><span class="na">class</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">pehl</span><span class="o">.</span><span class="na">piriti</span><span class="o">.</span><span class="na">rebind</span><span class="o">.</span><span class="na">VelocityLogger</span>
</span><span class='line'><span class="n">input</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="n">output</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="n">resource</span><span class="o">.</span><span class="na">manager</span><span class="o">.</span><span class="na">logwhenfound</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="n">resource</span><span class="o">.</span><span class="na">manager</span><span class="o">.</span><span class="na">defaultcache</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">resource</span><span class="o">.</span><span class="na">loader</span> <span class="o">=</span> <span class="n">cp</span>
</span><span class='line'><span class="n">cp</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">loader</span><span class="o">.</span><span class="na">class</span> <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">velocity</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">loader</span><span class="o">.</span><span class="na">ClasspathResourceLoader</span>
</span><span class='line'><span class="n">cp</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">loader</span><span class="o">.</span><span class="na">cache</span> <span class="o">=</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the code generation process is reduced to the following lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PrintWriter</span> <span class="n">printWriter</span> <span class="o">=</span> <span class="n">generatorContext</span><span class="o">.</span><span class="na">tryCreate</span><span class="o">(</span><span class="n">treeLogger</span><span class="o">,</span> <span class="n">somePackage</span><span class="o">,</span> <span class="n">implName</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">printWriter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">VelocityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VelocityContext</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// Put all neccesarry objects into the velocity context</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="o">...);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;name/pehl/piriti/rebind/velocity.properties&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Properties</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'>    <span class="n">properties</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span><span class='line'>    <span class="n">VelocityEngine</span> <span class="n">velocityEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VelocityEngine</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span><span class='line'>    <span class="n">velocityEngine</span><span class="o">.</span><span class="na">mergeTemplate</span><span class="o">(</span><span class="s">&quot;someTemplate.vm&quot;</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">printWriter</span><span class="o">);</span>
</span><span class='line'>    <span class="n">generatorContext</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">treeLogger</span><span class="o">,</span> <span class="n">printWriter</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to delve deeper into the code generation process in <a href="https://github.com/hpehl/piriti">Piriti</a>, check out
the trunk and take a look into the code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcement: Piriti 0.7.0b1]]></title>
    <link href="http://hpehl.info/announcement-piriti-0-70b1.html"/>
    <updated>2011-05-09T23:12:00+02:00</updated>
    <id>http://hpehl.info/announcement-piriti-0-70b1</id>
    <content type="html"><![CDATA[<p>I&#8217;m pleased to announce the first beta of the upcoming Piriti 0.7.0 release. Piriti 0.7.0 is a major release with
breaking API changes, lots of new features and bugfixes.<!-- more --></p>

<h3>Breaking API Changes</h3>

<ul>
<li>Piriti requires GWT 2.2 and GIN 1.5</li>
<li>Dropped GXT support</li>
<li>Removed <code>@Json</code>, <code>@JsonMappings</code>, <code>@Xml</code> and <code>@XmlMappings</code> annotations</li>
</ul>


<h3>New Features</h3>

<ul>
<li>Devided Piriti into different modules:

<ul>
<li><code>name.pehl.piriti.commons.Commons</code></li>
<li><code>name.pehl.piriti.converter.Converter</code></li>
<li><code>name.pehl.piriti.json.JSON</code></li>
<li><code>name.pehl.piriti.property.Property</code></li>
<li><code>name.pehl.piriti.xml.XML</code></li>
</ul>
</li>
<li>Simplified mapping setup: All properties in a POJO hirarchy are now mapped by default</li>
<li>Added new annotations to overide default behaviour:

<ul>
<li><code>@Order</code></li>
<li><code>@Path</code></li>
<li><code>@Format</code></li>
<li><code>@Native</code></li>
<li><code>@Transient</code></li>
<li><code>@CreateWith</code></li>
<li><code>@MapUpTo</code></li>
</ul>
</li>
<li>Added <code>@Mappings</code> and <code>@Mapping</code> annotation for external mappings (JSON and XML)</li>
<li>Added support for polymorhic assoziations</li>
<li>Converters can now be used for any type</li>
<li>Added XML serialisation (not yet implemented, but scheduled for the 0.7.0 release)</li>
<li>Added support for IDs and IDREFs in JSON (not yet implemented, but scheduled for the 0.7.0 release)</li>
</ul>


<h3>Bugfixes</h3>

<ul>
<li>Fixed problems when mapping collection implementations</li>
<li><code>GWT.create()</code> is now used instead of new operator</li>
<li>I also restructured the wiki and added a FAQ and a comparison to other JSON / XML mappers. Feel free to visit
<a href="https://github.com/hpehl/piriti/">https://github.com/hpehl/piriti/</a> and test the new release.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Taoki and Karaka Mentioned in GWT-GAE-Book]]></title>
    <link href="http://hpehl.info/taoki-and-tire-mentioned-in-gwt-gae-book.html"/>
    <updated>2010-12-03T08:48:00+01:00</updated>
    <id>http://hpehl.info/taoki-and-tire-mentioned-in-gwt-gae-book</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/hpehl/taoki">Taoki</a> and <a href="https://github.com/hpehl/karaka">Karaka</a> are mentioned in the free online
book on GWT and AppEngine development by Marius Andreiana.</p>

<p>The book covers also a lot of <a href="https://github.com/ArcBees/GWTP">GWTP</a> and its core examples are great illustrations
for many features of the framework! It also makes use of Gin, Guice, Twig-Persist, Mockito and many other useful tools.</p>

<p>Go check it out: <a href="http://code.google.com/p/gwt-gae-book/">http://code.google.com/p/gwt-gae-book/</a></p>

<p>Many thanks to Marius for such a valuable resource, and congratulations on publishing it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcement: Piriti 0.6]]></title>
    <link href="http://hpehl.info/announcement-piriti-0-6.html"/>
    <updated>2010-10-27T15:52:00+02:00</updated>
    <id>http://hpehl.info/announcement-piriti-0-6</id>
    <content type="html"><![CDATA[<p>I&#8217;m pleased to announce Piriti 0.6. This is a major update which adds support for JSONPath expressions. Please take
a look at the <a href="https://github.com/hpehl/piriti/wiki/Releasenotes">release notes</a> for further info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Karaka - Time recording made easy]]></title>
    <link href="http://hpehl.info/karaka-time-recording-made-easy.html"/>
    <updated>2010-10-03T22:53:00+02:00</updated>
    <id>http://hpehl.info/karaka-time-recording-made-easy</id>
    <content type="html"><![CDATA[<p>Currently I&#8217;m developing a personal time recording tool based on GWT and deployed at Google App Engine. Besides being
useful I wanted to use the latest web techniques / frameworks in a real application. Karaka uses the following
stack:<!-- more --></p>

<ul>
<li><a href="http://code.google.com/appengine/">Google App Engine</a></li>
<li><a href="http://seamframework.org/Weld">CDI (Weld)</a> / <a href="http://code.google.com/p/google-gin/">GIN</a></li>
<li><a href="http://code.google.com/p/objectify-appengine/">Objectify</a></li>
<li><a href="http://www.jboss.org/resteasy">JAX-RS / RESTEasy</a></li>
<li><a href="http://code.google.com/webtoolkit/">GWT 2.5</a>

<ul>
<li><a href="http://code.google.com/webtoolkit/doc/latest/DevGuideUiCellWidgets.html">Cell Widgets</a></li>
<li><a href="http://code.google.com/intl/de-DE/webtoolkit/doc/latest/DevGuideUiEditors.html">Editors</a></li>
<li><a href="http://code.google.com/webtoolkit/doc/latest/DevGuideLogging.html">Logging</a></li>
</ul>
</li>
<li><a href="http://code.google.com/p/gwt-platform/">GWTP</a></li>
<li><a href="http://hpehl.github.com/totoe/">Totoe</a></li>
<li><a href="http://hpehl.github.com/piriti/">Piriti</a></li>
<li><a href="http://www.moxiegroup.com/moxieapps/gwt-highcharts/">GWT Highcharts</a></li>
</ul>


<p>Work is still in progress. But you can take a first look at Karaka following the link below.
One last note: Karaka uses some of the new HTML5 / CSS3 features and therefore requires a modern browser.</p>

<p><a href="http://www.w3.org/html/logo/"><img src="http://www.w3.org/html/logo/badge/html5-badge-h-css3-graphics-semantics.png" width="197" height="64" title="HTML5 Powered with CSS3 / Styling, Graphics, 3D & Effects, and Semantics"/></a></p>

<p><a href="http://karaka-d8.appspot.com/">http://karaka-d8.appspot.com/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paging in Resources]]></title>
    <link href="http://hpehl.info/paging-in-resources.html"/>
    <updated>2010-09-13T11:21:00+02:00</updated>
    <id>http://hpehl.info/paging-in-resources</id>
    <content type="html"><![CDATA[<p>A common requirement for resources which return large collections of records is paging. Paging can be implemented in
many different ways. <!-- more -->See the following pages as an entry point to the discussion:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/924472/paging-in-a-rest-collection">Stackoverflow</a></li>
<li><a href="http://docs.dojocampus.org/dojox/data/JsonRestStore#paging">DOJO</a></li>
</ul>


<p>In the following sections I will introduce three different solutions. All of them are implemented in
<a href="https://github.com/hpehl/taoki">Taoki</a> - a small extension for <a href="http://www.restlet.org">Restlet</a>.</p>

<h3>Template Parameter</h3>

<p>This implementation uses parts of the url to carry the paging information:</p>

<pre><code>GET /books
GET /books/0/50
GET /books/0/50/author/asc
</code></pre>

<p>The advantage of this implementation is that the resource can be cached by proxies. The drawback is that a lot of
template parameters are &#8220;wasted&#8221;. For example /books/report/{quarter} won&#8217;t be available as route, since it is
occupied by /books/{offset}/{pageSize}</p>

<h3>Query Parameter</h3>

<p>This implementation uses query parameter.</p>

<pre><code>GET /books
GET /books?offset=0&amp;amp;limit=50
GET /books?offset=0&amp;amp;limit=50&amp;amp;sortField=author&amp;amp;sortDir=asc
</code></pre>

<p>Most proxies won&#8217;t cache resources which include parameters, but there are no template parameters wasted.</p>

<h3>Custom Header</h3>

<p>This implementation uses the custom header Item-Range.</p>

<pre><code>GET /books
GET /books
Item-Range: items=0-49
GET /books
Item-Range: items=0-49;author:desc
</code></pre>

<p>It combines the advantages of the other two implementations. A minor drawback of this solution is that the paging
information is no longer visible in the URL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcement: Piriti 0.4]]></title>
    <link href="http://hpehl.info/announcement-piriti-0-4.html"/>
    <updated>2010-07-07T16:28:00+02:00</updated>
    <id>http://hpehl.info/announcement-piriti-0-4</id>
    <content type="html"><![CDATA[<p>I&#8217;m pleased to announce Piriti 0.4. This is a major update which adds support for namespaces in XML document and XPath
expressions. Please take a look at the <a href="https://github.com/hpehl/piriti/wiki/Releasenotes">release notes</a> for further info.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New XML parser for GWT]]></title>
    <link href="http://hpehl.info/new-xml-parser-for-gwt.html"/>
    <updated>2010-07-07T13:31:00+02:00</updated>
    <id>http://hpehl.info/new-xml-parser-for-gwt</id>
    <content type="html"><![CDATA[<p>I&#8217;m pleased to announce the first release of <a href="https://github.com/hpehl/totoe">Totoe</a>. Totoe is a XML parser for GWT
which comes with XPath and namespace support. It originated from Piriti a JSON and XML mapper for GWT.<!-- more --></p>

<p>Totoe uses <a href="http://dev.abiss.gr/sarissa/">Sarissa</a> for the XML parsing. Sarissa is a great cross browser XML parser
for Javascript. Essentially Totoe is a GWT port of Sarissa with the goal to offer a similar API as the GWT XML module.
Right now the focus is on parsing XML - there are no methods to create, insert or append documents, elements or nodes.
Those features might come in later releases. The big advantage over the GWT XML module is IMHO a cleaner API and the
support of XPath and namespaces.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcement: Piriti 0.3.5]]></title>
    <link href="http://hpehl.info/announcement-piriti-0-35.html"/>
    <updated>2010-06-18T17:19:00+02:00</updated>
    <id>http://hpehl.info/announcement-piriti-0-35</id>
    <content type="html"><![CDATA[<p>I&#8217;m pleased to announce Piriti 0.3.5. This is a minor update which fixes some bugs and changes the way JSON data is
parsed. Please take a look at the <a href="https://github.com/hpehl/piriti/wiki/Releasenotes">release notes</a> for further
info.<!-- more --></p>

<p>I&#8217;m still looking for a clever way to include namespace support into Piriti. So if there&#8217;s anybody out there with a
namespace aware XPath implementation that works in IE, contact me!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcement: Piriti 0.3.1]]></title>
    <link href="http://hpehl.info/announcement-piriti-0-31.html"/>
    <updated>2010-03-26T14:07:00+01:00</updated>
    <id>http://hpehl.info/announcement-piriti-0-31</id>
    <content type="html"><![CDATA[<p>I&#8217;m pleased to announce Piriti 0.3.1. Piriti is a JSON and XML mapper for GWT. It is based on annotations and
deferred binding. Here are some of the features:<!-- more --></p>

<ul>
<li>Built-in support for many types (primitives, String, Date, Enums, ..)</li>
<li>Possibility to specify date and number formats</li>
<li>Support for mapping arrays and collections</li>
<li>Flexible XML mapping using XPath expressions</li>
<li>GXT extension for mapping to GXT models</li>
<li>Restlet extension built on top of the Restlet GWT edition</li>
</ul>


<p>If you want to learn more about Piriti here are some links where you can start:</p>

<ul>
<li>Project page: <a href="https://github.com/hpehl/piriti">https://github.com/hpehl/piriti</a></li>
<li>Wiki: <a href="https://github.com/hpehl/piriti/wiki">https://github.com/hpehl/piriti/wiki</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restlet Extension for Piriti]]></title>
    <link href="http://hpehl.info/restlet-extension-for-piriti.html"/>
    <updated>2010-03-25T09:49:00+01:00</updated>
    <id>http://hpehl.info/restlet-extension-for-piriti</id>
    <content type="html"><![CDATA[<p><a href="http://restlet.org">Restlet</a> is a RESTful Web framework for Java. There&#8217;s also a GWT edition available. The Piriti
Restlet extensions is built on top of that edition. Therefore the 2.x version of Restlet is used. There are two
representations available which use the Piriti readers to convert JSON and XML data to your model (POJOs and/or
GXT models).<!-- more --></p>

<h3>Read and convert JSON</h3>

<p>To read the JSON data you need an instance of JsonReader<T>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">interface</span> <span class="nc">BookReader</span> <span class="kd">extends</span> <span class="n">JsonReader</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="o">{}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BookReader</span> <span class="n">JSON</span> <span class="o">=</span> <span class="n">GWT</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">BookReader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Fields annotated with @JsonField</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you can read the JSON data like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClientResource</span> <span class="n">clientResource</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">ClientResource</span><span class="o">(</span><span class="s">&quot;/resource/with/json/representation&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">clientResource</span><span class="o">.</span><span class="na">setOnResponse</span><span class="o">(</span><span class="k">new</span> <span class="n">Uniform</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">PiritiJsonRepresentation</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">representation</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">PiritiJsonRepresentation</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;(</span><span class="n">Book</span><span class="o">.</span><span class="na">JSON</span><span class="o">,</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Depending whether there&#39;s one book or an array of books</span>
</span><span class='line'>            <span class="c1">// in your JSON data</span>
</span><span class='line'>            <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="n">representation</span><span class="o">.</span><span class="na">getModels</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">representation</span><span class="o">.</span><span class="na">getModel</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">clientResource</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entity returned by the resource has to be a valid JSON object. In case you want to read a list of books, the
JSON object has to contain one key (name does not matter) with the array of books:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span><span class="err">books:</span> <span class="err">[{isbn:</span> <span class="nt">&quot;0815&quot;</span><span class="p">,</span> <span class="err">title:</span> <span class="nt">&quot;Foo&quot;</span><span class="p">}</span><span class="err">,</span> <span class="p">{</span><span class="err">isbn:</span> <span class="nt">&quot;1234&quot;</span><span class="p">,</span> <span class="err">title:</span> <span class="nt">&quot;Bar&quot;</span><span class="p">}</span><span class="err">]}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Read and convert XML</h3>

<p>To read the XML data you need an instance of XmlReader<T></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">interface</span> <span class="nc">BookReader</span> <span class="kd">extends</span> <span class="n">XmlReader</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="o">{}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BookReader</span> <span class="n">XML</span> <span class="o">=</span> <span class="n">GWT</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">BookReader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Fields annotated with @XmlField</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Then you can read the XML data like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">ClientResource</span> <span class="n">clientResource</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">new</span> <span class="nf">ClientResource</span><span class="o">(</span><span class="s">&quot;/resource/with/xml/representation&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">clientResource</span><span class="o">.</span><span class="na">setOnResponse</span><span class="o">(</span><span class="k">new</span> <span class="n">Uniform</span><span class="o">()</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">PiritiXmlRepresentation</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">representation</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="n">PiritiXmlRepresentation</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;(</span><span class="n">Book</span><span class="o">.</span><span class="na">XML</span><span class="o">,</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">());</span>
</span><span class='line'>        <span class="k">try</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Depending whether there&#39;s one book element or a list of book</span>
</span><span class='line'>            <span class="c1">// elements in your XML data</span>
</span><span class='line'>            <span class="n">List</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books</span> <span class="o">=</span> <span class="n">representation</span><span class="o">.</span><span class="na">getModels</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">representation</span><span class="o">.</span><span class="na">getModel</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">clientResource</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">MediaType</span><span class="o">.</span><span class="na">TEXT_XML</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The entity returned by the resource has to be a valid XML document. In case you want to read a list of books, the
document must contain a list of book elements as direct children of the root element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;books&gt;</span>
</span><span class='line'>    <span class="nt">&lt;book&gt;</span>
</span><span class='line'>        <span class="nt">&lt;isbn&gt;</span>0815<span class="nt">&lt;/isbn&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Foo<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/book&gt;</span>
</span><span class='line'>    <span class="nt">&lt;book&gt;</span>
</span><span class='line'>        <span class="nt">&lt;isbn&gt;</span>1234<span class="nt">&lt;/isbn&gt;</span>
</span><span class='line'>        <span class="nt">&lt;title&gt;</span>Bar<span class="nt">&lt;/title&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/book&gt;</span>
</span><span class='line'><span class="nt">&lt;/books&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Further information</h3>

<p>If you want to learn more about Piriti and its extensions, please feel free to take a look at it under
<a href="https://github.com/hpehl/piriti">https://github.com/hpehl/piriti</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON Mapping in Piriti]]></title>
    <link href="http://hpehl.info/json-mapping-in-piriti.html"/>
    <updated>2010-03-22T12:11:00+01:00</updated>
    <id>http://hpehl.info/json-mapping-in-piriti</id>
    <content type="html"><![CDATA[<p>Following a <a href="http://restlet.tigris.org/ds/viewMessage.do?dsForumId=4447&amp;dsMessageId=2450017">proposal</a> by Jerome
Louvel, I added JSON mapping to Piriti. Piriti is a JSON / XML mapper for GWT based on annotations and deferred
binding.<!-- more --></p>

<p>To map JSON data you have to annotate your model classes with @JsonField annotations. In case you have the following
JSON structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">isbn:</span> <span class="nt">&quot;978-0345417954&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">pages:</span> <span class="err">432,</span>
</span><span class='line'>    <span class="err">title:</span> <span class="nt">&quot;The Hotel New Hampshire&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">author:</span> <span class="err">{</span>
</span><span class='line'>        <span class="err">firstname:</span> <span class="nt">&quot;John&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="err">surname:</span> <span class="nt">&quot;Irving&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="p">}</span><span class="err">,</span>
</span><span class='line'>    <span class="err">reviews:</span> <span class="p">[</span>
</span><span class='line'>        <span class="s2">&quot;A hectic gaudy saga with the verve of a Marx Brothers movie.&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Rejoice! John Irving has written another book according to your world.&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;Spellbinding, intensely human, a high-wire act of dazzling virtuosity.&quot;</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can use the following code to map the JSON data to your model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Book</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">interface</span> <span class="nc">BookReader</span> <span class="kd">extends</span> <span class="n">JsonReader</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Book</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">BookReader</span> <span class="n">JSON</span> <span class="o">=</span> <span class="n">GWT</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">BookReader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JsonField</span> <span class="n">String</span> <span class="n">isbn</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@JsonField</span> <span class="kt">int</span> <span class="n">pages</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@JsonField</span> <span class="n">String</span> <span class="n">title</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@JsonField</span> <span class="n">Author</span> <span class="n">author</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@JsonField</span> <span class="n">List</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="n">reviews</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Author</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">interface</span> <span class="nc">AuthorReader</span> <span class="kd">extends</span> <span class="n">JsonReader</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">Author</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;</span> <span class="o">{}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">AuthorReader</span> <span class="n">JSON</span> <span class="o">=</span> <span class="n">GWT</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">AuthorReader</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@JsonField</span> <span class="n">String</span> <span class="n">firstname</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@JsonField</span> <span class="n">String</span> <span class="n">surname</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">...</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">jsonString</span> <span class="o">=</span> <span class="o">...;</span> <span class="c1">// The JSON structure (see above) </span>
</span><span class='line'><span class="n">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">Book</span><span class="o">.</span><span class="na">JSON</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">jsonString</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>To learn more about piriti take a look at <a href="https://github.com/hpehl/piriti">https://github.com/hpehl/piriti</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Restlet and Google Guice]]></title>
    <link href="http://hpehl.info/restlet-and-google-guice.html"/>
    <updated>2010-02-15T17:33:00+01:00</updated>
    <id>http://hpehl.info/restlet-and-google-guice</id>
    <content type="html"><![CDATA[<p>In an earlier <a href="http://hpehl.info/google-appengine-restlet-guice.html">post</a> I described how to configure resources with Google Guice.
I decided to move the relevant code to a small library called &#8220;Taoki&#8221; (Maori for &#8220;rest&#8221;).</p>

<p>Besides the features described in the initial post, I added the possibility to configure security for resources.
The details will be described in a separated post.</p>

<p>For those interested, take a look at <a href="https://github.com/hpehl/taoki">https://github.com/hpehl/taoki</a></p>
]]></content>
  </entry>
  
</feed>
