<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Harald Pehl]]></title>
  <link href="http://hpehl.info/atom.xml" rel="self"/>
  <link href="http://hpehl.info/"/>
  <updated>2015-08-11T15:54:30+02:00</updated>
  <id>http://hpehl.info/</id>
  <author>
    <name><![CDATA[Harald Pehl]]></name>
    <email><![CDATA[harald.pehl@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GWT Elemento]]></title>
    <link href="http://hpehl.info/gwt-elemento.html"/>
    <updated>2015-08-11T12:32:00+02:00</updated>
    <id>http://hpehl.info/gwt-elemento</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/hpehl/elemento">GWT Elemento</a> is a library which tries to make working with GWT <a href="http://www.gwtproject.org/articles/elemental.html">Elemental</a> as easy as possible. In a nutshell Elemento brings the following features to the table:</p>

<ul>
<li>Builder like API to easily create arbitrary large element hierarchies</li>
<li>HTML templates, declarative event handling and support for <a href="http://handlebarsjs.com/">handlebar</a>-like expressions</li>
<li>Support for dependency injection with <a href="https://code.google.com/p/google-gin/">GIN</a></li>
<li>Helper methods to mix and match GWT Elemental elements and GWT widgets</li>
</ul>


<p>In this blog post I will give a short introduction to some of Element&#8217;s features.<!-- more --></p>

<h1>Builder API</h1>

<p>When working with GWT Elemental it is often awkward and cumbersome to create an hierarchy of elements. Even simple structures like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;toggle-all&quot;</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;toggle-all&quot;</span><span class="nt">&gt;</span>Mark all as complete<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;todo-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;view&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;toggle&quot;</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span> <span class="na">checked</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;label&gt;</span>Taste Elemento<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>                <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;destroy&quot;</span><span class="nt">&gt;&lt;/button&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>            <span class="nt">&lt;input</span> <span class="na">class=</span><span class="s">&quot;edit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>lead to a vast amount of <code>Document.createXXXElement()</code> and chained <code>Element.appendChild()</code> calls. However using Elemento&#8217;s builder API, creating the above structure is as easy as</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">jboss</span><span class="o">.</span><span class="na">gwt</span><span class="o">.</span><span class="na">elemento</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">InputType</span><span class="o">.</span><span class="na">checkbox</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">jboss</span><span class="o">.</span><span class="na">gwt</span><span class="o">.</span><span class="na">elemento</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">InputType</span><span class="o">.</span><span class="na">text</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// @formatter:off</span>
</span><span class='line'><span class="n">Element</span> <span class="n">element</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Elements</span><span class="o">.</span><span class="na">Builder</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">section</span><span class="o">().</span><span class="na">css</span><span class="o">(</span><span class="s">&quot;main&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">input</span><span class="o">(</span><span class="n">checkbox</span><span class="o">).</span><span class="na">css</span><span class="o">(</span><span class="s">&quot;toggle-all&quot;</span><span class="o">)</span>
</span><span class='line'>        <span class="o">.</span><span class="na">label</span><span class="o">().</span><span class="na">attr</span><span class="o">(</span><span class="s">&quot;for&quot;</span><span class="o">,</span> <span class="s">&quot;toggle-all&quot;</span><span class="o">).</span><span class="na">innerText</span><span class="o">(</span><span class="s">&quot;Mark all as complete&quot;</span><span class="o">).</span><span class="na">end</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">ul</span><span class="o">().</span><span class="na">css</span><span class="o">(</span><span class="s">&quot;todo-list&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">li</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">div</span><span class="o">().</span><span class="na">css</span><span class="o">(</span><span class="s">&quot;view&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">input</span><span class="o">(</span><span class="n">checkbox</span><span class="o">).</span><span class="na">css</span><span class="o">(</span><span class="s">&quot;toggle&quot;</span><span class="o">)</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">label</span><span class="o">().</span><span class="na">innerText</span><span class="o">(</span><span class="s">&quot;Taste Elemento&quot;</span><span class="o">).</span><span class="na">end</span><span class="o">()</span>
</span><span class='line'>                    <span class="o">.</span><span class="na">button</span><span class="o">().</span><span class="na">css</span><span class="o">(</span><span class="s">&quot;destroy&quot;</span><span class="o">).</span><span class="na">end</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">end</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">input</span><span class="o">(</span><span class="n">text</span><span class="o">).</span><span class="na">css</span><span class="o">(</span><span class="s">&quot;edit&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="o">.</span><span class="na">end</span><span class="o">()</span>
</span><span class='line'>        <span class="o">.</span><span class="na">end</span><span class="o">()</span>
</span><span class='line'>    <span class="o">.</span><span class="na">end</span><span class="o">().</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'><span class="c1">// @formatter:on</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Templates</h1>

<p>Elemento provides an easy way to take existing HTML content and use it in your GWT application. Templates can be either HTML snippets or full HTML documents where you select an element and its children. This allows you to preview your templates more easily during design without running the application.</p>

<p>Elemento leverages annotation processors to generate code which picks the HTML content from your template. Let&#8217;s say you&#8217;ve got the following HTML document called <code>Todo.html</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">&quot;en&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;&lt;path-to&gt;/node_modules/todomvc-common/base.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;&lt;path-to&gt;/node_modules/todomvc-app-css/index.css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;section</span> <span class="na">data-element=</span><span class="s">&quot;todos&quot;</span> <span class="na">class=</span><span class="s">&quot;todoapp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">&quot;header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h1&gt;</span>todos<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">data-element=</span><span class="s">&quot;newTodo&quot;</span> <span class="na">class=</span><span class="s">&quot;new-todo&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;What needs to be done?&quot;</span> <span class="na">autofocus</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>    <span class="nt">&lt;section</span> <span class="na">data-element=</span><span class="s">&quot;main&quot;</span> <span class="na">class=</span><span class="s">&quot;main&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">data-element=</span><span class="s">&quot;toggleAll&quot;</span> <span class="na">class=</span><span class="s">&quot;toggle-all&quot;</span> <span class="na">id=</span><span class="s">&quot;toggle-all&quot;</span> <span class="na">type=</span><span class="s">&quot;checkbox&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">&quot;toggle-all&quot;</span><span class="nt">&gt;</span>Mark all as complete<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">data-element=</span><span class="s">&quot;list&quot;</span> <span class="na">class=</span><span class="s">&quot;todo-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="c">&lt;!-- Todo items are mapped to an extra template class --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;footer</span> <span class="na">data-element=</span><span class="s">&quot;footer&quot;</span> <span class="na">class=</span><span class="s">&quot;footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;span</span> <span class="na">data-element=</span><span class="s">&quot;count&quot;</span> <span class="na">class=</span><span class="s">&quot;todo-count&quot;</span><span class="nt">&gt;&lt;strong&gt;</span>0<span class="nt">&lt;/strong&gt;</span> item left<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;filters&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">data-element=</span><span class="s">&quot;all&quot;</span> <span class="na">href=</span><span class="s">&quot;#/&quot;</span><span class="nt">&gt;</span>All<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">data-element=</span><span class="s">&quot;active&quot;</span> <span class="na">href=</span><span class="s">&quot;#/active&quot;</span><span class="nt">&gt;</span>Active<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">data-element=</span><span class="s">&quot;completed&quot;</span> <span class="na">href=</span><span class="s">&quot;#/completed&quot;</span><span class="nt">&gt;</span>Completed<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;button</span> <span class="na">data-element=</span><span class="s">&quot;clearCompleted&quot;</span> <span class="na">class=</span><span class="s">&quot;clear-completed&quot;</span><span class="nt">&gt;</span>Clear completed<span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/footer&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span><span class='line'>[...]
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The HTML is enriched with <code>data-element</code> attributes. Elemento needs these attributes to select the root element and to map specific HTML elements to fields in the template class. To create a template class which maps to the <code>&lt;section/&gt;</code> element, create an abstract class and annotate it with <code>@Templated</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Templated</span><span class="o">(</span><span class="s">&quot;Todo.html#todos&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Todos</span> <span class="kd">implements</span> <span class="n">IsElement</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">static</span> <span class="n">Todos</span> <span class="nf">create</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Templated_Todos</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@DataElement</span> <span class="n">InputElement</span> <span class="n">newTodo</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span> <span class="n">Element</span> <span class="n">main</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span> <span class="n">InputElement</span> <span class="n">toggleAll</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span> <span class="n">Element</span> <span class="n">list</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span> <span class="n">Element</span> <span class="n">footer</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span> <span class="n">Element</span> <span class="n">count</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span><span class="o">(</span><span class="s">&quot;all&quot;</span><span class="o">)</span> <span class="n">Element</span> <span class="n">filterAll</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span><span class="o">(</span><span class="s">&quot;active&quot;</span><span class="o">)</span> <span class="n">Element</span> <span class="n">filterActive</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span><span class="o">(</span><span class="s">&quot;completed&quot;</span><span class="o">)</span> <span class="n">Element</span> <span class="n">filterCompleted</span><span class="o">;</span>
</span><span class='line'>    <span class="nd">@DataElement</span> <span class="n">ButtonElement</span> <span class="n">clearCompleted</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@EventHandler</span><span class="o">(</span><span class="n">element</span> <span class="o">=</span> <span class="s">&quot;newTodo&quot;</span><span class="o">,</span> <span class="n">on</span> <span class="o">=</span> <span class="n">keydown</span><span class="o">)</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">newTodo</span><span class="o">(</span><span class="n">KeyboardEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">[...]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@EventHandler</span><span class="o">(</span><span class="n">element</span> <span class="o">=</span> <span class="s">&quot;clearCompleted&quot;</span><span class="o">,</span> <span class="n">on</span> <span class="o">=</span> <span class="n">click</span><span class="o">)</span>
</span><span class='line'>    <span class="kt">void</span> <span class="nf">clearCompleted</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">[...]</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To map specific elements from the HTML to your template class use the <code>@DataElement</code> annotation. If no value is provided for the <code>@DataElement</code> annotation, the name of the field / method is taken as default.</p>

<p>It&#8217;s also possible to register event handlers for elements marked with <code>data-element=&lt;name&gt;</code>. It does not matter whether the HTML element is mapped with <code>@DataElement</code>. Attaching the event handler will work in any case.</p>

<p>If you want to learn more about HTML templates take a look at the <a href="https://github.com/hpehl/elemento#templates">official documentation</a>.</p>

<h1>Goodies</h1>

<p>Elemento contains a small set of static helper methods to make working with elements easier. One set of methods can be used to convert between <code>Element</code> and <code>Widget</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Converts from {@link IsElement} &amp;rarr; {@link Widget}.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Widget</span> <span class="nf">asWidget</span><span class="o">(</span><span class="n">IsElement</span> <span class="n">element</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Converts from {@link Element} &amp;rarr; {@link Widget}.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Widget</span> <span class="nf">asWidget</span><span class="o">(</span><span class="n">Element</span> <span class="n">element</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Converts from {@link IsWidget} &amp;rarr; {@link Element}.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Element</span> <span class="nf">asElement</span><span class="o">(</span><span class="n">IsWidget</span> <span class="n">widget</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Converts from {@link Widget} &amp;rarr; {@link Element}.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Element</span> <span class="nf">asElement</span><span class="o">(</span><span class="n">Widget</span> <span class="n">widget</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Converts from {@link com.google.gwt.dom.client.Element} &amp;rarr; {@link Element}.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Element</span> <span class="nf">asElement</span><span class="o">(</span><span class="n">com</span><span class="o">.</span><span class="na">google</span><span class="o">.</span><span class="na">gwt</span><span class="o">.</span><span class="na">dom</span><span class="o">.</span><span class="na">client</span><span class="o">.</span><span class="na">Element</span> <span class="n">element</span><span class="o">)</span> <span class="o">{...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally there are methods to iterate over the children of an element using the Java collection classes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns an iterator over the children of the given parent element. The iterator supports the {@link</span>
</span><span class='line'><span class="cm"> * Iterator#remove()} operation which removes the current element from its parent.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Iterator</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">(</span><span class="n">Element</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{...}</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Returns an iterable collection for the children of the given parent element.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Iterable</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="nf">children</span><span class="o">(</span><span class="n">Element</span> <span class="n">parent</span><span class="o">)</span> <span class="o">{...}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Take a look at the <a href="http://rawgit.com/hpehl/elemento/site/apidocs/org/jboss/gwt/elemento/core/Elements.html">API documentation</a> for more details.</p>

<h2>Samples</h2>

<p>Elemento comes with three different <a href="http://hpehl.github.io/elemento/index.html">implementations</a> of the <a href="http://todomvc.com/">TodoMVC</a> sample app.</p>

<ul>
<li>Builder API: <a href="https://github.com/hpehl/elemento/tree/develop/samples/builder">Source</a> | <a href="http://hpehl.github.io/elemento/builder/index.html">Demo</a></li>
<li>Plain HTML templates: <a href="https://github.com/hpehl/elemento/tree/develop/samples/templated">Source</a> | <a href="http://hpehl.github.io/elemento/templated/index.html">Demo</a></li>
<li>HTML templates with GIN support: <a href="https://github.com/hpehl/elemento/tree/develop/samples/gin">Source</a> | <a href="http://hpehl.github.io/elemento/gin/index.html">Demo</a></li>
</ul>


<p>All three samples are using the same key to persist the todo items in the local storage. So you can switch between the samples and continue working on your tasks seamlessly ;-)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extending HAL Management Console]]></title>
    <link href="http://hpehl.info/extending-hal-management-console.html"/>
    <updated>2015-06-26T14:49:00+02:00</updated>
    <id>http://hpehl.info/extending-hal-management-console</id>
    <content type="html"><![CDATA[<p>The HAL management console provides the UI to configure almost any subsystem in WildFly. However for subsystems provided by 3rd party projects like <a href="http://picketlink.org/">PicketLink</a>, <a href="http://teiid.jboss.org/">Teiid</a> or <a href="http://keycloak.jboss.org/">Keycloak</a> there&#8217;s no way to configure the management resources. This is where the HAL extensions come into play. They provide an easy way to extend the console and provide a frontend to configure the related subsystem. This blog post will walk through the process from creating an extension to including it in the HAL release stream.<!-- more --></p>

<h1>Background</h1>

<p>Before we start let me give you some technical background. The HAL management console is a GWT web application. It uses a maven build and depends mainly on <a href="https://code.google.com/p/google-gin/">GIN</a> for dependency injection and <a href="http://dev.arcbees.com/gwtp/">GWTP</a> for MVP. Extensions need to use the same stack and must create a maven artifact which is used by the <a href="https://github.com/hal/release-stream">HAL release stream</a> at <em>compile time</em>. As a result the final management console is produced. This means that the final console might contain many extensions. However the extensions will only show up if the relevant subsystem is part of WildFly. Furthermore since the console uses <a href="http://www.gwtproject.org/doc/latest/DevGuideCodeSplitting.html">code splitting</a> the extension&#8217;s bits &amp; pieces will only be loaded on demand.</p>

<h1>Get Started</h1>

<p>As of today extensions need to be developed against HAL 2.8.0 or greater. This in turn requires WildFly 10.x as target platform. To get started quickly we provide a <a href="https://github.com/hal/archetypes/tree/master/subsystem-extension">maven archetype</a>. The archetype creates an extension with a presenter / view tuple to edit the top level attributes of a given subsystem.</p>

<p>Besides the regular maven coordinates like <code>groupId</code>, <code>artifactId</code> et al the archetypes uses the following parameters:</p>

<ul>
<li><code>extensionName</code>: The name / title of the extension as it appears in the UI. Should be a human friendly term which can contains spaces.</li>
<li><code>gwtModule</code> The name of the GWT module w/o the <code>.gwt.xml</code> suffix. Must not contain whitespace.</li>
<li><code>subsystem</code>: The name of the subsystem. The extension will only show up in the UI if the subsystem is configured in standalone mode or is part of the selected profile in domain mode.</li>
<li><code>nameToken</code>: An unique name token used to identify the extension&#8217;s page in the UI. Should be an all lowercase string separated with dashes. Defaults to the subsystem name. See the <a href="http://dev.arcbees.com/gwtp/features/PlaceManager.html">GWTP documentation</a> for more infos about place management.</li>
</ul>


<p>The archetype is deployed to the <a href="https://repository.jboss.org/nexus/index.html#welcome">JBoss Maven Repository</a>. In order to use it, make sure to specify the catalog flag <code>-DarchetypeCatalog=https://repository.jboss.org</code>.</p>

<h2>Request Controller</h2>

<p>Let&#8217;s say we want to develop an extension for the subsystem <code>request-controller</code>. This subsystem is used for request limiting and graceful shutdown and is currently not covered in the HAL management console. Open a shell and execute</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate \
</span><span class='line'>    -DarchetypeCatalog=https://repository.jboss.org \
</span><span class='line'>    -DarchetypeGroupId=org.jboss.hal.archetypes \
</span><span class='line'>    -DarchetypeArtifactId=hal-subsystem-extension-archetype</span></code></pre></td></tr></table></div></figure>


<p>After providing all required parameters you should end up with a new maven project which consists of two sub modules:</p>

<ul>
<li><code>gui</code>: Contains the GWT code for the extension</li>
<li><code>app</code>: Provides a GWT module to run and test the extension</li>
</ul>


<p>Before we dive into the details, here&#8217;s a preview of what the extension is going to look like in the navigation, read-only and edit mode:</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/extension_1.png" title="&#34;Navigation&#34;" alt="&#34;Navigation&#34;"></figure>
<figure class="centered"><img src="http://hpehl.info/images/posts/extension_2.png" title="&#34;Read-only mode&#34;" alt="&#34;Read-only mode&#34;"></figure>
<figure class="centered"><img src="http://hpehl.info/images/posts/extension_3.png" title="&#34;Edit mode&#34;" alt="&#34;Edit mode&#34;"></figure></p>

<h1>Develop</h1>

<p>The development of the extension happens in the <code>gui</code> module. The archetype creates all necessary building blocks:</p>

<ul>
<li>a presenter / view tuple</li>
<li>the GIN / GWTP mixins</li>
<li>i18n helper classes</li>
</ul>


<h2>Presenter / View Tuple</h2>

<p>The GWTP presenter includes the proxy interface which carries the <code>@SubsystemExtension</code> annotation. This annotation marks the enclosing presenter as an extension. The view interface defines a method to update the view with the subsystem data. Finally there are two methods to load and save the subsystem attributes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtensionPresenter</span>
</span><span class='line'>        <span class="kd">extends</span> <span class="n">Presenter</span><span class="o">&lt;</span><span class="n">ExtensionPresenter</span><span class="o">.</span><span class="na">MyView</span><span class="o">,</span> <span class="n">ExtensionPresenter</span><span class="o">.</span><span class="na">MyProxy</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span> <span class="n">ROOT_RESOURCE</span> <span class="o">=</span> <span class="s">&quot;{selected.profile}/subsystem=request-controller&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">AddressTemplate</span> <span class="n">ROOT_RESOURCE_ADDRESS</span> <span class="o">=</span> <span class="n">AddressTemplate</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">ROOT_RESOURCE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ProxyCodeSplit</span>
</span><span class='line'>    <span class="nd">@NameToken</span><span class="o">(</span><span class="s">&quot;request-controller&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@RequiredResources</span><span class="o">(</span><span class="n">resources</span> <span class="o">=</span> <span class="n">ROOT_RESOURCE</span><span class="o">)</span>
</span><span class='line'>    <span class="nd">@SearchIndex</span><span class="o">(</span><span class="n">keywords</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;request-controller&quot;</span><span class="o">})</span>
</span><span class='line'>    <span class="nd">@SubsystemExtension</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;Request Controller&quot;</span><span class="o">,</span> <span class="n">group</span> <span class="o">=</span> <span class="s">&quot;Extensions&quot;</span><span class="o">,</span> <span class="n">key</span> <span class="o">=</span> <span class="s">&quot;request-controller&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyProxy</span> <span class="kd">extends</span> <span class="n">ProxyPlace</span><span class="o">&lt;</span><span class="n">ExtensionPresenter</span><span class="o">&gt;</span> <span class="o">{}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MyView</span> <span class="kd">extends</span> <span class="n">View</span><span class="o">,</span> <span class="n">HasPresenter</span><span class="o">&lt;</span><span class="n">ExtensionPresenter</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="n">ModelNode</span> <span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">StatementContext</span> <span class="n">statementContext</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">DispatchAsync</span> <span class="n">dispatcher</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CrudOperationDelegate</span> <span class="n">operationDelegate</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">I18n</span> <span class="n">i18n</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ExtensionPresenter</span><span class="o">(</span><span class="kd">final</span> <span class="n">EventBus</span> <span class="n">eventBus</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MyView</span> <span class="n">view</span><span class="o">,</span> <span class="kd">final</span> <span class="n">MyProxy</span> <span class="n">proxy</span><span class="o">,</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">StatementContext</span> <span class="n">statementContext</span><span class="o">,</span> <span class="kd">final</span> <span class="n">DispatchAsync</span> <span class="n">dispatcher</span><span class="o">,</span> <span class="kd">final</span> <span class="n">I18n</span> <span class="n">i18n</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">(</span><span class="n">eventBus</span><span class="o">,</span> <span class="n">view</span><span class="o">,</span> <span class="n">proxy</span><span class="o">,</span> <span class="n">MainLayoutPresenter</span><span class="o">.</span><span class="na">TYPE_MainContent</span><span class="o">);</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">statementContext</span> <span class="o">=</span> <span class="n">statementContext</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">dispatcher</span> <span class="o">=</span> <span class="n">dispatcher</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">i18n</span> <span class="o">=</span> <span class="n">i18n</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">operationDelegate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CrudOperationDelegate</span><span class="o">(</span><span class="n">statementContext</span><span class="o">,</span> <span class="n">dispatcher</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[...]</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">loadSubsystem</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Operation</span> <span class="n">operation</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Operation</span><span class="o">.</span><span class="na">Builder</span><span class="o">(</span><span class="n">READ_RESOURCE_OPERATION</span><span class="o">,</span>
</span><span class='line'>                <span class="n">ROOT_RESOURCE_ADDRESS</span><span class="o">.</span><span class="na">resolve</span><span class="o">(</span><span class="n">statementContext</span><span class="o">)).</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>        <span class="n">dispatcher</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">DMRAction</span><span class="o">(</span><span class="n">operation</span><span class="o">),</span> <span class="k">new</span> <span class="n">SimpleCallback</span><span class="o">&lt;</span><span class="n">DMRResponse</span><span class="o">&gt;()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="kd">final</span> <span class="n">DMRResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ModelNode</span> <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">isFailure</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Console</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">i18n</span><span class="o">.</span><span class="na">extensionConstants</span><span class="o">().</span><span class="na">load_failed</span><span class="o">(),</span> <span class="n">body</span><span class="o">.</span><span class="na">getFailureDescription</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">getView</span><span class="o">().</span><span class="na">update</span><span class="o">(</span><span class="n">body</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">RESULT</span><span class="o">));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSaveResource</span><span class="o">(</span><span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Object</span><span class="o">&gt;</span> <span class="n">changedValues</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">operationDelegate</span><span class="o">.</span><span class="na">onSaveResource</span><span class="o">(</span><span class="n">ROOT_RESOURCE_ADDRESS</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">changedValues</span><span class="o">,</span>
</span><span class='line'>                <span class="k">new</span> <span class="n">CrudOperationDelegate</span><span class="o">.</span><span class="na">Callback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onFailure</span><span class="o">(</span><span class="kd">final</span> <span class="n">AddressTemplate</span> <span class="n">addressTemplate</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kd">final</span> <span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">Console</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">i18n</span><span class="o">.</span><span class="na">consoleMessages</span><span class="o">().</span><span class="na">modificationFailed</span><span class="o">(</span><span class="s">&quot;subsystem &#39;request-controller&#39;&quot;</span><span class="o">),</span>
</span><span class='line'>                                <span class="n">t</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                    <span class="nd">@Override</span>
</span><span class='line'>                    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSuccess</span><span class="o">(</span><span class="kd">final</span> <span class="n">AddressTemplate</span> <span class="n">addressTemplate</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">Console</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">i18n</span><span class="o">.</span><span class="na">consoleMessages</span><span class="o">().</span><span class="na">modified</span><span class="o">(</span><span class="s">&quot;subsystem &#39;request-controller&#39;&quot;</span><span class="o">));</span>
</span><span class='line'>                        <span class="n">loadSubsystem</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">});</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The view creates a form based on the subsystem metadata. When the user clicks save, control is delegated to the presenter which executes the relevant DMR operations to store the updated attributes in the management model.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtensionView</span> <span class="kd">extends</span> <span class="n">SuspendableViewImpl</span> <span class="kd">implements</span> <span class="n">ExtensionPresenter</span><span class="o">.</span><span class="na">MyView</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ResourceDescriptionRegistry</span> <span class="n">descriptionRegistry</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">SecurityFramework</span> <span class="n">securityFramework</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ExtensionPresenter</span> <span class="n">presenter</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ModelNodeForm</span> <span class="n">form</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">ExtensionView</span><span class="o">(</span><span class="kd">final</span> <span class="n">ResourceDescriptionRegistry</span> <span class="n">descriptionRegistry</span><span class="o">,</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">SecurityFramework</span> <span class="n">securityFramework</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">securityFramework</span> <span class="o">=</span> <span class="n">securityFramework</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">descriptionRegistry</span> <span class="o">=</span> <span class="n">descriptionRegistry</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Widget</span> <span class="nf">createWidget</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">SecurityContext</span> <span class="n">securityContext</span> <span class="o">=</span> <span class="n">securityFramework</span><span class="o">.</span><span class="na">getSecurityContext</span><span class="o">(</span><span class="n">presenter</span><span class="o">.</span><span class="na">getProxy</span><span class="o">().</span><span class="na">getNameToken</span><span class="o">());</span>
</span><span class='line'>        <span class="n">ResourceDescription</span> <span class="n">resourceDescription</span> <span class="o">=</span> <span class="n">descriptionRegistry</span><span class="o">.</span><span class="na">lookup</span><span class="o">(</span>
</span><span class='line'>                <span class="n">ExtensionPresenter</span><span class="o">.</span><span class="na">ROOT_RESOURCE_ADDRESS</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ModelNodeFormBuilder</span><span class="o">.</span><span class="na">FormAssets</span> <span class="n">formAssets</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ModelNodeFormBuilder</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setConfigOnly</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setResourceDescription</span><span class="o">(</span><span class="n">resourceDescription</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setSecurityContext</span><span class="o">(</span><span class="n">securityContext</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">form</span> <span class="o">=</span> <span class="n">formAssets</span><span class="o">.</span><span class="na">getForm</span><span class="o">();</span>
</span><span class='line'>        <span class="n">form</span><span class="o">.</span><span class="na">setToolsCallback</span><span class="o">(</span><span class="k">new</span> <span class="n">FormCallback</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSave</span><span class="o">(</span><span class="n">Map</span> <span class="n">changedValues</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">presenter</span><span class="o">.</span><span class="na">onSaveResource</span><span class="o">(</span><span class="n">changedValues</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCancel</span><span class="o">(</span><span class="n">Object</span> <span class="n">entity</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">form</span><span class="o">.</span><span class="na">cancel</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">SimpleLayout</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setPlain</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setHeadline</span><span class="o">(</span><span class="s">&quot;Request Controller&quot;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">setDescription</span><span class="o">(</span><span class="n">SafeHtmlUtils</span><span class="o">.</span><span class="na">fromString</span><span class="o">(</span><span class="n">resourceDescription</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">DESCRIPTION</span><span class="o">).</span><span class="na">asString</span><span class="o">()))</span>
</span><span class='line'>                <span class="o">.</span><span class="na">addContent</span><span class="o">(</span><span class="s">&quot;Attributes&quot;</span><span class="o">,</span> <span class="n">formAssets</span><span class="o">.</span><span class="na">asWidget</span><span class="o">())</span>
</span><span class='line'>                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">[...]</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">update</span><span class="o">(</span><span class="kd">final</span> <span class="n">ModelNode</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">form</span><span class="o">.</span><span class="na">edit</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>GIN / GWTP Mixins</h2>

<p>These mixins are needed to extend the dependency injection scope and wire up the presenter / view tuples. A mixin is declared both as a binding and model extension. The <code>@GinExtension</code> value refers the GWT module descriptor used with the extension.</p>

<p>The injection points:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GinExtension</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Extension</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">AsyncProvider</span><span class="o">&lt;</span><span class="n">ExtensionPresenter</span><span class="o">&gt;</span> <span class="nf">getExtensionPresenter</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The actual binding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@GinExtensionBinding</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtensionBinding</span> <span class="kd">extends</span> <span class="n">AbstractPresenterModule</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">bindPresenter</span><span class="o">(</span><span class="n">ExtensionPresenter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">ExtensionPresenter</span><span class="o">.</span><span class="na">MyView</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">ExtensionView</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
</span><span class='line'>                <span class="n">ExtensionPresenter</span><span class="o">.</span><span class="na">MyProxy</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Helper Classes</h2>

<p>Finally the archetype creates some helper classes to deal with i18n constants and messages. It provides both access to HAL&#8217;s constants and messages and to the resources defined by the extension:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">I18n</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UIConstants</span> <span class="n">consoleConstants</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UIMessages</span> <span class="n">consoleMessages</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExtensionConstants</span> <span class="n">extensionConstants</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">ExtensionMessages</span> <span class="n">extensionMessages</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">I18n</span><span class="o">(</span><span class="kd">final</span> <span class="n">UIConstants</span> <span class="n">consoleConstants</span><span class="o">,</span> <span class="kd">final</span> <span class="n">UIMessages</span> <span class="n">consoleMessages</span><span class="o">,</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">ExtensionConstants</span> <span class="n">extensionConstants</span><span class="o">,</span> <span class="kd">final</span> <span class="n">ExtensionMessages</span> <span class="n">extensionMessages</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">consoleConstants</span> <span class="o">=</span> <span class="n">consoleConstants</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">consoleMessages</span> <span class="o">=</span> <span class="n">consoleMessages</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">extensionConstants</span> <span class="o">=</span> <span class="n">extensionConstants</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">extensionMessages</span> <span class="o">=</span> <span class="n">extensionMessages</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">UIConstants</span> <span class="nf">consoleConstants</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">consoleConstants</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">UIMessages</span> <span class="nf">consoleMessages</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">consoleMessages</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ExtensionConstants</span> <span class="nf">extensionConstants</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">extensionConstants</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ExtensionMessages</span> <span class="nf">extensionMessages</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">extensionMessages</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Run</h1>

<p>To launch the extension, switch to the <code>app</code> directory and execute one of the following:</p>

<ul>
<li><code>mvn gwt:run</code> for GWT SuperDevMode</li>
<li><code>mvn gwt:run|debug -Dgwt.superDevMode=false</code> to use the old DevMode. Please note that you&#8217;ll need <a href="http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/26.0/">Firefox &lt;= 26</a> and the <a href="http://www.gwtproject.org/missing-plugin/">GWT plugin</a> to use DevMode.</li>
</ul>


<p>You&#8217;ll need a running WildFly instance which is configured to allow access from http://localhost:8888. Use one of the following CLI commands to configure the management endpoint:</p>

<ul>
<li><p>standalone mode:</p>

<pre><code>  /core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://localhost:8888)
  reload
</code></pre></li>
<li><p>domain mode:</p>

<pre><code>  /host=master/core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://localhost:8888)
  reload --host=master
</code></pre></li>
</ul>


<p>Please note that the extension will only show up in the UI if the subsystem is configured in standalone mode or is part of the selected profile in domain mode.</p>

<h1>Include</h1>

<p>The <a href="https://github.com/hal/release-stream">HAL release stream</a> is a maven build which combines different extensions at <em>compile time</em> and generates a final management console. You can clone its repository to test the build with your extension. Please contact us if you want to include your extension into the release stream.</p>

<h1>Resources</h1>

<p>Most of the topics in this blog post are also covered in the <a href="http://hal.gitbooks.io/dev/content/">official HAL documentation</a>. See the section <a href="http://hal.gitbooks.io/dev/content/building-blocks/extensions.html">Building Blocks / Extensions</a> for more details.</p>

<h1>It&#8217;s your turn</h1>

<p>Now if you want to write your own extension, great - go ahead! If you have any questions or comments, please do not hesitate to <a href="http://hal.gitbooks.io/dev/content/community/index.html">contact</a> us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDBC Driver Setup]]></title>
    <link href="http://hpehl.info/jdbc-driver-setup.html"/>
    <updated>2015-06-07T16:20:00+02:00</updated>
    <id>http://hpehl.info/jdbc-driver-setup</id>
    <content type="html"><![CDATA[<p>The installation of JDBC drivers and the setup of (xa)datasources is a common task for every JEE developer and administrator. This post describes the installation and setup of a MySQL driver and datasource using WildFly 9 in both standalone and domain mode.<!-- more --> The setup assumes a running MySQL database called <code>test</code> on localhost. If you use another database, you&#8217;ll probably go through the same steps, but using different parameters.</p>

<p> When installing a driver you basically have two options: install it as module or deploy it like any other application package. However when running domain mode you should choose to install the driver as module. Otherwise the driver won&#8217;t be recognized by the <code>:installed-drivers-list</code> operation. Drivers deployed as application packages need a running server, which cannot be guaranteed in domain mode. Thus the recommendation is to <em>always</em> use the module option in domain mode. For standalone mode you are free to choose between module and deployment since both options will work.</p>

<h1>Install as Module</h1>

<ol>
<li>Download the driver from the <a href="https://dev.mysql.com/downloads/connector/j/">MySQL website</a></li>
<li>Go to <code>WILDFLY_HOME/modules/system/layers/base/com</code> and create the folder <code>mysql/main</code></li>
<li>Unzip the downloaded file and copy the file <code>mysql-connector-java-5.1.23-bin.jar</code> to the new folder <code>WILDFLY_HOME/modules/system/layers/base/com/mysql/main</code></li>
<li>Create the file <code>module.xml</code> in the same folder with the following content:</li>
</ol>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;module</span> <span class="na">xmlns=</span><span class="s">&quot;urn:jboss:module:1.3&quot;</span> <span class="na">name=</span><span class="s">&quot;com.mysql&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;resources&gt;</span>
</span><span class='line'>        <span class="nt">&lt;resource-root</span> <span class="na">path=</span><span class="s">&quot;mysql-connector-java-5.1.35-bin.jar&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/resources&gt;</span>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;javax.api&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module</span> <span class="na">name=</span><span class="s">&quot;javax.transaction.api&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'><span class="nt">&lt;/module&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The name of the driver file may vary, so make sure you declare exactly the same name in the <code>resource-root</code> tag. After restarting WildFly the module is available and can be referenced to create a JDBC driver. Open the CLI and execute the following command for standalone mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[standalone@localhost:9990 /] /subsystem=datasources/jdbc-driver=mysql:add(\
</span><span class='line'>    driver-name=mysql,\
</span><span class='line'>    driver-module-name=com.mysql,\
</span><span class='line'>    driver-class-name=com.mysql.jdbc.Driver,\
</span><span class='line'>    driver-xa-datasource-class-name=com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\
</span><span class='line'>)
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>and this command if you&#8217;re using domain mode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[domain@localhost:9990 /] /profile=full/subsystem=datasources/jdbc-driver=mysql:add(\
</span><span class='line'>    driver-name=mysql,\
</span><span class='line'>    driver-module-name=com.mysql,\
</span><span class='line'>    driver-class-name=com.mysql.jdbc.Driver,\
</span><span class='line'>    driver-xa-datasource-class-name=com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\
</span><span class='line'>)
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>Install as Deployment</h1>

<p>Please note that this option is only valid for JDBC4 compliant drivers. For none JDBC4 compliant drivers you should install the driver as a module. Furthermore it&#8217;s not recommended for the domain mode.</p>

<ol>
<li>Download the driver from the <a href="https://dev.mysql.com/downloads/connector/j/">MySQL website</a></li>
<li>Unzip the downloaded file and deploy and enable the file <code>mysql-connector-java-5.1.23-bin.jar</code></li>
</ol>


<p>The contained JDBC drivers will be automatically detected and registered (no need to execute additional management operations).</p>

<h1>Setup a Datasource</h1>

<p>In order to setup a datasource open the management console and navigate to &#8220;Configuration / (Profile &#8230;) / Datasources&#8221; and click &#8220;Add&#8221; to bring up the wizard for creating a (XA) datasource. The console already contains templates for the most common databases. The templates combine settings like connection url, validation checker and exception sorter implementations. Choose &#8220;MySQL Datasource&#8221; and adjust the settings as necessary. You should see the JDBC driver you&#8217;ve installed as module or deployment in the &#8220;JDBC Driver&#8221; step under &#8220;Detected Driver&#8221;.</p>

<p>If you prefer to use the CLI to create the datasource use a command like this one (leave out <code>/profile=full</code> for standalone mode):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>[domain@localhost:9990 /] /profile=full/subsystem=datasources/data-source=MySqlDS:add(\
</span><span class='line'>    jndi-name=java:/MySqlDS,\
</span><span class='line'>    driver-name=mysql,\
</span><span class='line'>    connection-url=jdbc:mysql://localhost:3306/test
</span><span class='line'>)
</span></code></pre></td></tr></table></div></figure>


<p>However please note that you have to configure database specific settings like validation checker et al by yourself.</p>

<h1>Use the Datasource</h1>

<p>When running domain mode, the datasource is always bound to a profile and thus accessible by servers which are part of a server group which in turn uses that profile.</p>

<p>To access the datasource in your JEE app, use the JNDI name. Here&#8217;s an example of a JPA configuration:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;persistence-unit</span> <span class="na">name=</span><span class="s">&quot;app-pu&quot;</span> <span class="na">transaction-type=</span><span class="s">&quot;JTA&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;jta-data-source&gt;</span>java:/MySqlDS<span class="nt">&lt;/jta-data-source&gt;</span>
</span><span class='line'>    <span class="nt">&lt;exclude-unlisted-classes&gt;</span>false<span class="nt">&lt;/exclude-unlisted-classes&gt;</span>
</span><span class='line'>    <span class="nt">&lt;properties/&gt;</span>
</span><span class='line'><span class="nt">&lt;/persistence-unit&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and here an example for a resource injection:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SomeClass</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;java:/MySqlDS&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">javax</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUG Frankfurt 2]]></title>
    <link href="http://hpehl.info/jug-frankfurt-2.html"/>
    <updated>2015-03-26T20:59:00+01:00</updated>
    <id>http://hpehl.info/jug-frankfurt-2</id>
    <content type="html"><![CDATA[<p>Yesterday I gave a talk about &#8220;Errai - The browser as a platform&#8221; at the Java User Group Frankfurt. It was my second time at the JUG and it has been fun again! Most of the audience were surprised that GWT is still alive and very active. Even more they were impressed by the features of Errai and how easy it is to get up and running.</p>

<p>As always everything was well organized and the &#8220;Äpplewoi&#8221; and the &#8220;Schnitzel mit Frankfurter Soß&#8217;&#8221; was delicious!</p>

<p>Thanks for having me! Here are the slides of my talk: <a href="http://hpehl.info/talks/errai/index.html#/">Errai - The browser as a platform</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated management console in WildFly 9]]></title>
    <link href="http://hpehl.info/updated-management-console-in-wildfly-9.html"/>
    <updated>2015-03-16T22:44:00+01:00</updated>
    <id>http://hpehl.info/updated-management-console-in-wildfly-9</id>
    <content type="html"><![CDATA[<p>The upcoming WildFly 9 release will include an improved HAL management console based on the <a href="https://github.com/hal/core/tree/2.6.x">2.6.x branch</a> branch.</p>

<p>The improvements at a glance:</p>

<ul>
<li>New subsystem configuration: Remoting</li>
<li>Support for datasource templates.</li>
<li>Provide all flush-* operations for connection pools</li>
<li>Improved log viewer</li>
<li>Enhanced model browser</li>
<li>Get more details about applied patches</li>
<li>Standalone console</li>
</ul>


<!-- More -->


<h1>Remoting subsystem</h1>

<p>The remoting subsystem was added to the console. You can now configure remote (http) connectors and outbound connections.</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/remoting_subsystem.png" title="Remoting subsystem" ></figure></p>

<h1>Datasource Templates</h1>

<p>The management console provides for the datasource most commonly used templates with reasonable default settings. These presets include JNDI names, driver settings, datasource properties and highly specific options like validation checkers and exception sorters.</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/datasource_templates.png" title="Datasource templates" ></figure></p>

<h1>Improved Log Viewer</h1>

<p>WildFly 8.2 featured a log viewer which allowed you to browse through or tail server logs. Now you can view the log file as a whole in the console and search for specific text. Optionally you can download the full log file and open it in an external editor of your choice.</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/improved_log_viewer.png" title="Improved log viewer" ></figure></p>

<h1>Standalone Console</h1>

<p>Starting with WildFly 9 and <a href="http://hal.gitbooks.io/dev/content/release-coordination/versions/2.6.5.Final.html">HAL 2.6.5.Final</a> the management console can be launched independently from WildFly. Take a look at my <a href="http://hpehl.info/standalone-management-console.html">last post</a> for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standalone Management Console]]></title>
    <link href="http://hpehl.info/standalone-management-console.html"/>
    <updated>2015-03-16T16:00:00+01:00</updated>
    <id>http://hpehl.info/standalone-management-console</id>
    <content type="html"><![CDATA[<p>Back in 2013 I wrote about an idea to have an <a href="http://hpehl.info/independent-jboss-admin-console.html">independent management console</a> which can connect to arbitrary servers. Starting with WildFly 9 we finally have the technical prerequisites to ship such a console. In this blog post I will describe how to configure and launch an independent management console.<!-- more --></p>

<p>As you might know the management console is developed using GWT and compiles down to a bunch of HTML, JavaScript and CSS files. Until now these artifacts were a fixed module of each WildFly version. WildFly serves the console and the console talks to the same origin it was loaded from. This still holds true.</p>

<p>However starting with WildFly 9 the HTTP endpoint for the management interface supports the configuration of so-called allowed origins. This list - which is empty by default - contains URLs which are allowed to access the management interface (see http://en.wikipedia.org/wiki/Cross-origin_resource_sharing for more details). This setup is necessary to cope with the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a> (SOP) when the console is served from origin A, but talks to the management interface at origin B.</p>

<p>Equipped with these features we can now launch the management console from any URL and connect to any management interface which has this URL configured as an allowed origin. To make things simple, we&#8217;ve setup an <a href="http://access-halproject.rhcloud.com/">HAL build proxy</a> on OpenShift. This proxy is able to fetch any console version from the public JBoss maven repository and serve it using a distinct URL. It offers a list of simple HTTP endpoints:</p>

<ul>
<li><p><code>/latest</code><br/>
Displays the version of the latest HAL release<br/>
http://access-halproject.rhcloud.com/latest</p></li>
<li><p><code>/releases</code><br/>
Gets the list of supported HAL releases (w/o snapshots)<br/>
http://access-halproject.rhcloud.com/releases</p></li>
<li><p><code>/release/:version</code><br/>
Serves a specific HAL version (only works with version > 2.6.x)<br/>
http://access-halproject.rhcloud.com/release/2.6.5.Final</p></li>
<li><p><code>/snapshot/:version</code><br/>
Serves a specific HAL snapshot (only works with version > 2.6.x)<br/>
http://access-halproject.rhcloud.com//snapshot/2.7.0-SNAPSHOT</p></li>
</ul>


<p>If you don&#8217;t want to use the prebuilt proxy on OpenShift, you can also checkout the source code and run your own build proxy:</p>

<ol>
<li>Clone the registry from https://github.com/hal/mvn-repo-server</li>
<li>Build the proxy with Maven: <code>mvn clean package</code> (requires Java 8)</li>
<li>Start the proxy: <code>java -jar target/server-jar-with-dependencies.jar</code> (by default port 8080 is used)</li>
<li>Open http://localhost:8080/</li>
</ol>


<h1>Allowed Origins Setup</h1>

<p>Whether you use the prebuilt proxy on OpenShift or build your own, you have to add the URL of the standalone console to the list of allowed origins. Depending on the operation mode use one of the following CLI commands:</p>

<ul>
<li><p>standalone mode:</p>

<pre><code>  /core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://access-halproject.rhcloud.com)
  reload
</code></pre></li>
<li><p>domain mode:</p>

<pre><code>  /host=master/core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://access-halproject.rhcloud.com)
  reload --host=master
</code></pre></li>
</ul>


<h1>Console Configuration</h1>

<p>When you open the console it detects whether it is part of a WildFly instance or launched independently. In the latter case you need to specify a management interface you like to connect to. You can manage a list of different interfaces running on different WildFly instances. The configuration is stored in the browser&#8217;s local storage, so it&#8217;s available the next time you open the console.</p>

<p>Say you want access your local WildFly instance using the HAL management console 2.6.5.Final served from the build proxy. In order to do so, follow these steps:</p>

<ol>
<li><p>Point your browser to http://access-halproject.rhcloud.com/release/2.6.5.Final</p></li>
<li><p>Click &#8216;Add&#8217; to configure a management endpoint.<br/>
<img src="http://hpehl.info/images/posts/bootstrap_server_select_0.png" alt="Connect to Management Interface" /></p></li>
<li><p>Add the hostname and port of you local WildFly instance. You can verify your settings using &#8216;Ping&#8217;.<br/>
<img src="http://hpehl.info/images/posts/bootstrap_server_select_1.png" alt="Connect to Management Interface" /></p></li>
<li><p>Click &#8216;Connect&#8217; to finish.<br/>
<img src="http://hpehl.info/images/posts/bootstrap_server_select_2.png" alt="Connect to Management Interface" /></p></li>
</ol>


<p>You can use an existing configuration using the <code>connect</code> query parameter. For the above example this url is a shortcut and will skip the bootstrap dialogs: http://access-halproject.rhcloud.com/2.6.5.Final/App.html?connect=local</p>

<h1>Outlook</h1>

<p>In the future we&#8217;d like to use the new distribution model to provide different console versions with different feature sets (nightly, beta, stable). This gives us a way to share new features with the community as soon as possible and to get feedback earlier on.</p>

<h1>Limitations and Known Problems</h1>

<p>When using the standalone console there are some pitfalls and preconditions you should be aware of:</p>

<ul>
<li>The standalone console can only connect to WildFly 9.x and above.</li>
<li>Make sure to configure the allowed origins before connecting from the standalone console.</li>
<li>Don&#8217;t use different schemes (https and http) for the standalone console and the WildFly instance you want to connect to.</li>
<li>In rare cases it might be necessary to clear the cache or use the browser&#8217;s private mode when switching between different WildFly instances.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Search in the Management Console]]></title>
    <link href="http://hpehl.info/search_in_console.html"/>
    <updated>2014-11-21T10:21:00+01:00</updated>
    <id>http://hpehl.info/search_in_console</id>
    <content type="html"><![CDATA[<p>Today <a href="http://wildfly.org/news/2014/11/20/WildFly82-Final-Released/">WildFly 8.2.0.Final</a> was released. It comes with a number of improvements and bug fixes over the last release, 8.1.0.Final. Regarding the management console, Heiko Braun already gave a glimpse of some of new features in his recent <a href="http://hbraun.info/2014/10/updated-management-console-in-wildfly-8-2/">blog post</a>. Today I&#8217;d like to introduce yet another feature which was introduced in WildFyl 8.2: Local Search.<!-- more --></p>

<p>With every new feature added to WildFly, the number of screens and options in the management console grows as well. Sometimes it&#8217;s hard to quickly find the right screen where you can modify your JMS topics or monitor that data source connection pool. That&#8217;s why we added a search feature to the management console. It&#8217;s built around the idea to have an index which contains reasonable keywords and the descriptions from the underlying <a href="http://wildscribe.github.io/">management model</a>.</p>

<p>It&#8217;s super fast, because the index is built and stored locally inside the browser. That&#8217;s why you need a modern browser with support for <a href="http://caniuse.com/#search=localstorage">local storage</a> to use the search. Don&#8217;t worry about the size of the index, it&#8217;s quite compact: For WildFly 8.2 running in domain mode the index will be roughly 10 KByte large, so it&#8217;s no a big deal to keep the index in local storage. For those who want to know all the nitty-gritty details, the local search is based on the JavaScript framework <a href="http://lunrjs.com/">lunr.js</a>. In a nutshell lunr.js is slimmed full-text search engine ready to be used in your browser. But enough with all these implementation details. Let&#8217;s see how this all works:</p>

<p>To enter the search press the search link in the upper right corner of the management console:</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/local_search_header.png" title="Local Search" ></figure></p>

<p>The first time you enter the search, the index is automatically created based on the WildFly version, the operation mode (standalone or domain) and the language. During index creation the descriptions of the management model is fetched from the server side and stored in the index. Depending on your setup and network latency this make take a few seconds.</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/local_search_index_setup.png" title="Indexing..." ></figure></p>

<p>Once the index is ready you can start searching. As you type your query the results will update dynamically:</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/wdb3W-G-9WI" frameborder="0" allowfullscreen></iframe>




<br/>


<p>Give the new local search a try and let us know what you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JUG Frankfurt]]></title>
    <link href="http://hpehl.info/jug-frankfurt.html"/>
    <updated>2014-06-26T09:49:00+02:00</updated>
    <id>http://hpehl.info/jug-frankfurt</id>
    <content type="html"><![CDATA[<p>Yesterday I gave a talk about &#8220;WildFly 8 - the artist formerly known as JBoss AS&#8221; at the Java User Group Frankfurt. The venue was at the 4th floor of the &#8220;Deutsche Nationalbibliothek&#8221; in Frankfurt. I was quite impressed by the building and the nice meeting room! Afterwards we went to a nearby pub where I enjoyed &#8220;Äpplewoi&#8221; and a delicious &#8220;Schnitzel mit Frankfurter Soß&#8217;&#8221;.</p>

<p>I really enjoyed giving the presentation. Thanks for invitation.</p>

<p>Here are the slides of my talk:</p>

<ul>
<li><a href="http://hpehl.info/downloads/jugf_wildfly8.pdf">WildFly 8 - the artist formerly known as JBoss AS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Search using lunr.js]]></title>
    <link href="http://hpehl.info/search-using-lunr-dot-js.html"/>
    <updated>2014-02-11T21:44:00+01:00</updated>
    <id>http://hpehl.info/search-using-lunr-dot-js</id>
    <content type="html"><![CDATA[<p>When I <a href="http://hpehl.info/moved-blog-to-github-pages.html">moved</a> my blog from Blogger to Octopress back in May 2013, I always missed a powerful and well integrated search feature. Octopress is a static site generator and has no database to be queried for searches. The default search is just a redirection to Google Custom Search. This navigates away from the blog site and comes with Google Ads.<!-- more --></p>

<p>Once in a while I was looking for an alternative for my blog. When we developed a local search for the WildFly Admin Console, we choosed <a href="http://lunrjs.com/">lunr.js</a>. Lunr.js is a simple full-text search in your browser. This seems also a reasonable fit for my blog. After some research I came accross <a href="https://github.com/yortz/octopress-lunr-js-search">octopress-lunr-js-search</a>. It&#8217;s an Octopress plugin which generates a local search index. This index is used by a handful of scripts to implement a search-as-you-type feature.</p>

<p>When implementing the search, I basically followed the <a href="https://github.com/yortz/octopress-lunr-js-search#how-to-use">instructions</a> on the plugins website. However I did without the Jekyll asset plugin, because it would have meant a major reorganization of my blog. I decided to move the search to a modal dialog. This dialog is opened when you click on the little search icon in the header or press the shortcut (&#8984;+. / Ctrl+.). As you start typing, the search results will appear accordingly.</p>

<p>Give it a try and let me know if you like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WildFly Dockerfiles]]></title>
    <link href="http://hpehl.info/wildfly-dockerfiles.html"/>
    <updated>2013-11-28T14:40:00+01:00</updated>
    <id>http://hpehl.info/wildfly-dockerfiles</id>
    <content type="html"><![CDATA[<p>For the last couple of days I have been playing with <a href="http://www.docker.io">Docker</a>. In a nutshell Docker is a tool
that lets you create images and run so called containers. It uses <a href="http://lxc.sourceforge.net/">Linux Containers</a> (LXC)
under the hood. What appears to be yet another virtualization solution, is in fact a very lightweight way to setup,
manage and run &#8220;processes in a box&#8221;.<!-- more --></p>

<p>Docker comes with a great <a href="http://www.docker.io/gettingstarted/">tutorial</a> and a
reasonable <a href="http://docs.docker.io/en/latest/">documentation</a>. So I won&#8217;t go into any details here. There are also some
very good <a href="http://goldmann.pl/blog/tags/docker/">posts</a> from <a href="http://goldmann.pl/blog/">Marek Goldmann</a> which helped
me a lot getting started. In the remaining part of this post I will show you how to setup both a WildFly standalone
server and a domain with multiple hosts and servers. Here we go!</p>

<h1>Preperations</h1>

<p>I assume you already have installed Docker. If not please refer to the
<a href="http://www.docker.io/gettingstarted/#h_installation">offical documentation</a> on how to setup Docker on your machine.
The following assumes you&#8217;re using Docker 0.7.0.</p>

<p>I&#8217;ve put together a repository which is based on Ubuntu and contains Java7 and WildFly 8.0.0.Beta1. It does not contain
any commands or entrypoints, but is intended to serve as a base repository for the other WildFly related repositories.
You can grap it and use it as a starting point:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ docker pull hpehl/wildfly
</span><span class='line'>$ docker run -i -t hpehl/wildfly /bin/bash</span></code></pre></td></tr></table></div></figure>


<h1>Standalone</h1>

<p>To quickly run a standalone server, I&#8217;ve put together the repository <code>hpehl/wildfly-standalone</code>. It is based on
<code>hpehl/wildfly</code> and starts an unmodified standalone server. The standalone server exposes the following ports:</p>

<ul>
<li>8080 for HTTP</li>
<li>9990 for HTTP based management and</li>
<li>9999 for native management</li>
</ul>


<p>You can use the user <code>admin:passw0rd_</code> to access the management interfaces. Running it with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -p 49080:8080 -p 49090:9990 -d hpehl/wildfly-standalone</span></code></pre></td></tr></table></div></figure>


<p>will start the server. You can check the status with <code>docker logs &lt;CONTAINER_ID&gt;</code>. After a short while you should
be able to access the server using http://localhost:49080</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/docker_wildfly_standalone.png" title="WildFly standalone server running inside a Docker container" ></figure></p>

<h1>Domain</h1>

<p>To setup a domain use the repository <code>hpehl/wildfly-domain</code>. It contains different tags to start a domain controller
and up to four hosts. Tags are a way to reference different images inside a repository. The syntax for tags is
<code>&lt;repository&gt;:&lt;tag&gt;</code>. When no tag is given, Docker uses the tag <code>latest</code>. The domain repository consists of these tags:</p>

<ul>
<li><code>hpehl/wildfly-domain:dc</code>: The domain controller with five servers. The domain controller defines three server groups:

<ul>
<li>deployment</li>
<li>staging</li>
<li>production</li>
</ul>
</li>
<li><code>hpehl/wildfly-domain:hostA</code>: First host with three servers</li>
<li><code>hpehl/wildfly-domain:hostB</code>: Second host with three servers</li>
<li><code>hpehl/wildfly-domain:hostC</code>: Third host with two servers</li>
<li><code>hpehl/wildfly-domain:hostD</code>: Fourth host with two servers</li>
</ul>


<p>Docker has a great feature which enables inter-container communication. This is done by specifying the <code>link</code>
parameter. When linking two containers Docker will use the exposed ports of the container to create a secure tunnel
for the parent to access. This feature is used in the WildFly domain for the communication between the domain
controller and the hosts.</p>

<p>In order to setup and run the domain, you have to first start the domain controller. After that you can start as many
hosts as you like and link them to the domain controller. Be sure to use &#8220;dc&#8221; as name (using another name won&#8217;t work):</p>

<pre><code>docker run -name wildfly-dc -d hpehl/wildfly-domain:dc
docker run -name hostA -link wildfly-dc:dc -d hpehl/wildfly-domain:hostA
docker run -name hostB -link wildfly-dc:dc -d hpehl/wildfly-domain:hostB
docker run -name hostC -link wildfly-dc:dc -d hpehl/wildfly-domain:hostC
docker run -name hostD -link wildfly-dc:dc -d hpehl/wildfly-domain:hostD
</code></pre>

<p>Some notes:</p>

<ul>
<li>The domain controller exposes the standard ports

<ul>
<li>8080 for HTTP</li>
<li>9990 for HTTP based management and</li>
<li>9999 for native management</li>
</ul>
</li>
<li>The hosts expose just port 8080</li>
<li>The domain controller defines the user <code>admin:passw0rd_</code>, which can be used for management</li>
</ul>


<h1>Troubleshooting</h1>

<p>Unfortunately in the current WildFly Beta there&#8217;s a problem if you want to access the admin console of a WildFly
instance running inside a Docker container. I assume this will be fixed once WildFly GA is available. For the time
being you can only use the CLI.</p>

<p>If you need the console, you can use for instance EAP 6.2 which is not affected by this
limitation. You can find <a href="https://github.com/hpehl/dockerfiles/tree/master/eap62">Dockerfiles</a> on my GitHub account
using EAP. However please note that there&#8217;s no EAP distribution included. You have to provide one on your own.</p>

<h1>Summary</h1>

<p>Using Docker it is really easy to setup a WildFly domain. Adding / removing hosts is just a matter of
starting / stopping Docker containers.</p>

<p>Docker offers also a rich API. So setting up your domain could also be done using a nifty web front-end where you
&#8216;click together&#8217; your server groups, hosts and servers. The Dockerfiles, images and containers would then be created
based on your input - all fully automatically!</p>

<h1>Resources</h1>

<ul>
<li>WildFly repositories on index.docker.io: https://index.docker.io/u/hpehl/</li>
<li>Related Dockerfiles: https://github.com/hpehl/dockerfiles/tree/master/wildfly</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JBoss One Day Talk]]></title>
    <link href="http://hpehl.info/jboss-one-day-talk.html"/>
    <updated>2013-10-24T09:45:00+02:00</updated>
    <id>http://hpehl.info/jboss-one-day-talk</id>
    <content type="html"><![CDATA[<p>Yesterday I presented &#8220;WildFly 8 - the artist formerly known as JBoss AS&#8221; at the
<a href="http://onedaytalk.org/">JBoss One Day Talk</a> in Munich. Furthermore I had the chance to give a brief introduction to
&#8220;DMR.scala / DMR.repl&#8221;.</p>

<p>I really enjoyed attending the conference. It was well organized and packed with great talks. Here are the slides of my talks (partly in German):</p>

<ul>
<li><a href="http://hpehl.info/downloads/onedaytalk_wildfly8.pdf">WildFly 8 - the artist formerly known as JBoss AS</a></li>
<li><a href="http://slid.es/hpehl/dmrscala">DMR.scala / DMR.repl</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polyglot DMR]]></title>
    <link href="http://hpehl.info/using-dmr-with-scala.html"/>
    <updated>2013-09-28T00:20:00+02:00</updated>
    <id>http://hpehl.info/using-dmr-with-scala</id>
    <content type="html"><![CDATA[<p>The <strong>d</strong>ynamic or <strong>d</strong>etyped <strong>m</strong>odel <strong>r</strong>epresentation (DMR) is an API to interact with the management model of a
running WildFly instance. There&#8217;s an Java API available at <a href="https://github.com/jbossas/jboss-dmr">https://github.com/jbossas/jboss-dmr</a> which is described in
the <a href="https://docs.jboss.org/author/display/WFLY8/Detyped+management+and+the+jboss-dmr+library">WildFly Wiki</a>. Though
the Java API is very rich and powerful it is somewhat hard to write scripts that perform useful tasks like</p>

<ul>
<li>Periodically read the memory and send an SMS / tweet / email when a threshold is reached</li>
<li>Rollout a deployment over all servers in a cluster</li>
<li>Monitor the state of an application<!--more--></li>
</ul>


<p>To address this challenges we created different client libraries for different languages:</p>

<h1>Scala</h1>

<p>The scala library is hosted at <a href="https://github.com/hpehl/dmr.scala">DMR.scala</a>. The
<a href="https://github.com/heiko-braun/dmr-repl">DMR.repl</a> library leverages the Scala REPL to execute DMR operations in
a very interactive way.</p>

<h1>Dart</h1>

<p>Using <a href="https://github.com/hal/dmr.dart">DMR.dart</a> you can run DRM operations in Dart. Both executing individual
operations, as well as writing whole web applications is possible.</p>

<h1>Node.js</h1>

<p>The library for Node.js is called <a href="https://github.com/hal/dmr.js">DMR.js</a>.</p>

<h1>Ideas</h1>

<p>Bringing the DMR library to different languages opens up many possibilities. We can think of a repository with
(parameterized) management scripts, an integration with Gist / Paste.bin to quickly share your operations with
your co-workers, &#8230; We&#8217;d love to heear your feedback and suggestions on this!</p>

<h1>Open Issues</h1>

<p>One of the main challenges when using the different client libraries is authentication. Right now there&#8217;s a workaround
to use a <a href="http://hpehl.info/independent-jboss-admin-console.html">CORS enables JBoss AS instance</a> which is however a bit out of date.
IMO the solution for this is to bring OAuth support to WildFly. For the time being the usage of the client libraries is
somewhat limeted and if any feasible when running on the same host.</p>

<h1>Conclusion</h1>

<p>The different libraries are very much work in progress, but we&#8217;d love to here your feedback!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Mails from OpenShift]]></title>
    <link href="http://hpehl.info/send-mails-from-openshift.html"/>
    <updated>2013-08-04T19:42:00+02:00</updated>
    <id>http://hpehl.info/send-mails-from-openshift</id>
    <content type="html"><![CDATA[<p>OpenShift is a great place to host your applications. In this post I&#8217;m going to show you how you can easily send mails
from your JEE applications running on JBoss. For sending mails I&#8217;m going to configure an external SMTP server. Any SMTP
server will do, I&#8217;m going to use GMail.<!-- more --></p>

<p>In case you don&#8217;t already have an application ready, create one selecting the JBoss AS 7 cartridge. Clone the git
repository and open the JBoss standalone configuration: <code>.openshift/config/standalone.xml</code>. Look for the mail subsystem
which should look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;subsystem</span> <span class="na">xmlns=</span><span class="s">&quot;urn:jboss:domain:mail:1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;mail-session</span> <span class="na">jndi-name=</span><span class="s">&quot;java:jboss/mail/Default&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;smtp-server</span> <span class="na">outbound-socket-binding-ref=</span><span class="s">&quot;mail-smtp&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/mail-session&gt;</span>
</span><span class='line'><span class="nt">&lt;/subsystem&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re going to add another mail session / smtp server using GMail:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;subsystem</span> <span class="na">xmlns=</span><span class="s">&quot;urn:jboss:domain:mail:1.0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;mail-session</span> <span class="na">jndi-name=</span><span class="s">&quot;java:/mail/Gmail&quot;</span> <span class="na">from=</span><span class="s">&quot;your.name@gmail.com&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;smtp-server</span> <span class="na">ssl=</span><span class="s">&quot;true&quot;</span> <span class="na">outbound-socket-binding-ref=</span><span class="s">&quot;gmail-smtp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;login</span> <span class="na">name=</span><span class="s">&quot;your.name@gmail.com&quot;</span> <span class="na">password=</span><span class="s">&quot;...&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/smtp-server&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/mail-session&gt;</span>
</span><span class='line'><span class="nt">&lt;/subsystem&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enter your credentials for the SMTP server you want to use. In case you have activated application specific passwords
in your Google profile, the password is not your Google password, but an application specific one you have to create
first.</p>

<p>As you can see we&#8217;re referencing a named socket binding, which we&#8217;re going to create now. Towards the end of the
standalone configuration you can see all configured socket bindings:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;socket-binding-group</span> <span class="na">name=</span><span class="s">&quot;standard-sockets&quot;</span> <span class="na">default-interface=</span><span class="s">&quot;public&quot;</span> <span class="na">port-offset=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;http&quot;</span> <span class="na">port=</span><span class="s">&quot;8080&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;jacorb&quot;</span> <span class="na">interface=</span><span class="s">&quot;unsecure&quot;</span> <span class="na">port=</span><span class="s">&quot;3528&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;jacorb-ssl&quot;</span> <span class="na">interface=</span><span class="s">&quot;unsecure&quot;</span> <span class="na">port=</span><span class="s">&quot;3529&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;jgroups-tcp&quot;</span> <span class="na">port=</span><span class="s">&quot;7600&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;management-native&quot;</span> <span class="na">interface=</span><span class="s">&quot;management&quot;</span> <span class="na">port=</span><span class="s">&quot;9999&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;management-http&quot;</span> <span class="na">interface=</span><span class="s">&quot;management&quot;</span> <span class="na">port=</span><span class="s">&quot;9990&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;messaging&quot;</span> <span class="na">port=</span><span class="s">&quot;5445&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;messaging-throughput&quot;</span> <span class="na">port=</span><span class="s">&quot;5455&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;osgi-http&quot;</span> <span class="na">interface=</span><span class="s">&quot;management&quot;</span> <span class="na">port=</span><span class="s">&quot;8090&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;remoting&quot;</span> <span class="na">port=</span><span class="s">&quot;4447&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;txn-recovery-environment&quot;</span> <span class="na">port=</span><span class="s">&quot;4712&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;socket-binding</span> <span class="na">name=</span><span class="s">&quot;txn-status-manager&quot;</span> <span class="na">port=</span><span class="s">&quot;4713&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;outbound-socket-binding</span> <span class="na">name=</span><span class="s">&quot;mail-smtp&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;remote-destination</span> <span class="na">host=</span><span class="s">&quot;localhost&quot;</span> <span class="na">port=</span><span class="s">&quot;25&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/outbound-socket-binding&gt;</span>
</span><span class='line'><span class="nt">&lt;/socket-binding-group&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Add an outbound socket binding for you SMTP server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;socket-binding-group</span> <span class="na">name=</span><span class="s">&quot;standard-sockets&quot;</span> <span class="na">default-interface=</span><span class="s">&quot;public&quot;</span> <span class="na">port-offset=</span><span class="s">&quot;0&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>    <span class="nt">&lt;outbound-socket-binding</span> <span class="na">name=</span><span class="s">&quot;gmail-smtp&quot;</span> <span class="na">source-port=</span><span class="s">&quot;0&quot;</span> <span class="na">fixed-source-port=</span><span class="s">&quot;false&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;remote-destination</span> <span class="na">host=</span><span class="s">&quot;smtp.gmail.com&quot;</span> <span class="na">port=</span><span class="s">&quot;465&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/outbound-socket-binding&gt;</span>
</span><span class='line'><span class="nt">&lt;/socket-binding-group&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re almost done! Now you can use the mail session in your application. In my case I&#8217;m using the mail session from an
<a href="http://www.jboss.org/errai">Errai</a> service, but any other server side class (REST endpoint, servlet, EJB, POJO) should
work also:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">static</span> <span class="n">javax</span><span class="o">.</span><span class="na">mail</span><span class="o">.</span><span class="na">Message</span><span class="o">.</span><span class="na">RecipientType</span><span class="o">.</span><span class="na">TO</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.annotation.Resource</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Address</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.MessagingException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Session</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.Transport</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.internet.InternetAddress</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.mail.internet.MimeMessage</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.common.base.Optional</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.errai.bus.client.api.messaging.Message</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.errai.bus.client.api.messaging.MessageCallback</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.errai.bus.server.annotations.Service</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.jboss.errai.common.client.protocols.MessageParts</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Service</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FeedbackService</span> <span class="kd">implements</span> <span class="n">MessageCallback</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Resource</span><span class="o">(</span><span class="n">mappedName</span> <span class="o">=</span> <span class="s">&quot;java:/mail/Gmail&quot;</span><span class="o">)</span> <span class="kd">private</span> <span class="n">Session</span> <span class="n">mailSession</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">callback</span><span class="o">(</span><span class="n">Message</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// get data out of the message and persist feedback </span>
</span><span class='line'>        <span class="n">String</span> <span class="n">guest</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;guest&quot;</span><span class="o">)).</span><span class="na">or</span><span class="o">(</span><span class="s">&quot;n/a&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">commitment</span> <span class="o">=</span> <span class="n">Optional</span><span class="o">.</span><span class="na">fromNullable</span><span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">Boolean</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;commitment&quot;</span><span class="o">)).</span><span class="na">or</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">saveFeedback</span><span class="o">(</span><span class="n">guest</span><span class="o">,</span> <span class="n">commitment</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// send response using the Errai message bus</span>
</span><span class='line'>        <span class="c1">// see http://docs.jboss.org/errai/2.4.0.Beta1/errai/reference/html_single/#sid-5931263 </span>
</span><span class='line'>        <span class="c1">// for more details</span>
</span><span class='line'>        <span class="n">createConversation</span><span class="o">(</span><span class="n">message</span><span class="o">)</span>
</span><span class='line'>                <span class="o">.</span><span class="na">subjectProvided</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">done</span><span class="o">()</span>
</span><span class='line'>                <span class="o">.</span><span class="na">reply</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// sending the mail might take a moment, so this is done *after* sending the response to the client.</span>
</span><span class='line'>        <span class="n">sendMail</span><span class="o">(</span><span class="n">guest</span><span class="o">,</span> <span class="n">commitment</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">saveFeedback</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">guest</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">commitment</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">sendMail</span><span class="o">(</span><span class="kd">final</span> <span class="n">String</span> <span class="n">guest</span><span class="o">,</span> <span class="kd">final</span> <span class="kt">boolean</span> <span class="n">commitment</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">MimeMessage</span> <span class="n">message</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MimeMessage</span><span class="o">(</span><span class="n">mailSession</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Address</span><span class="o">[]</span> <span class="n">to</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InternetAddress</span><span class="o">[]{</span><span class="k">new</span> <span class="n">InternetAddress</span><span class="o">(</span><span class="s">&quot;your.name@gmail.com&quot;</span><span class="o">)};</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setRecipients</span><span class="o">(</span><span class="n">TO</span><span class="o">,</span> <span class="n">to</span><span class="o">);</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="s">&quot;Your subject&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">message</span><span class="o">.</span><span class="na">setContent</span><span class="o">(</span><span class="s">&quot;Your message&quot;</span><span class="o">,</span> <span class="s">&quot;text/plain&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Transport</span><span class="o">.</span><span class="na">send</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MessagingException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// error handling</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s all - any feedback, thoughts and objections are welcome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Admin Apps]]></title>
    <link href="http://hpehl.info/admin-apps.html"/>
    <updated>2013-07-18T11:46:00+02:00</updated>
    <id>http://hpehl.info/admin-apps</id>
    <content type="html"><![CDATA[<p>If you ever wanted to administer your JBoss servers from your iOS or Andoird phone, checkout these great apps from
<a href="https://twitter.com/cvasilak">Christos Vasilakis</a>:</p>

<ul>
<li>Android: <a href="https://github.com/cvasilak/JBoss-Admin-Android">https://github.com/cvasilak/JBoss-Admin-Android</a></li>
<li>iOS: <a href="http://www.cvasilak.org/JBossAdmin.html">http://www.cvasilak.org/JBossAdmin.html</a> <a href="https://itunes.apple.com/us/app/jboss-admin/id523516060?mt=8&uo=4" target="itunes_store"><img src="http://r.mzstatic.com/images/web/linkmaker/badge_appstore-sm.gif" alt="JBoss Admin - Christos Vasilakis" style="border: 0;"/></a></li>
</ul>


<p>Keep it up, Christos!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTP Caching]]></title>
    <link href="http://hpehl.info/http-caching.html"/>
    <updated>2013-05-27T21:14:00+02:00</updated>
    <id>http://hpehl.info/http-caching</id>
    <content type="html"><![CDATA[<p>I recently implemented caching for distinct operations of the
<a href="https://docs.jboss.org/author/display/WFLY8/The+HTTP+management+API">HTTP management API</a> in
<a href="http://www.wildfly.org/">WildFly</a>. As a preparation I did some research on HTTP caching and how it&#8217;s best
implemented on the server side. A really good introduction is the
<a href="http://www.mnot.net/cache_docs/">caching tutorial</a> by Mark Nottingham. I&#8217;ll discuss the key points in this
blog post.<!-- more --></p>

<h1>Terminology</h1>

<p>A cache sits between one or more servers (also known as <em>origin</em> servers) and a client watching requests and saving
responses (also known as <em>representations</em>). There are different kind of caches:</p>

<ul>
<li>browser caches</li>
<li>proxy cahces</li>
<li>gateway caches</li>
</ul>


<p>The cache I want to look at in more detail is the browser cache. Every browser uses a section of your hard disk
to store representations that you&#8217;ve seen. The browser will check to make sure that the representations are fresh,
usually once a session (that is, the once in the current invocation of the browser).</p>

<h1>Rules for Caching</h1>

<p>There are certain rules used to decide when to serve a representation from the cache.</p>

<ol>
<li>If the response’s headers tell the cache not to keep it, it won’t.</li>
<li><p>A cached representation is considered fresh (that is, able to be sent to a client without checking with the origin server) if:</p>

<ul>
<li>It has an expiry time or other age-controlling header set, and is still within the fresh period, or</li>
<li>If the cache has seen the representation recently, and it was modified relatively long ago.</li>
</ul>


<p> Fresh representations are served directly from the cache, without checking with the origin server.</p></li>
<li>If a representation is stale, the origin server will be asked to validate it, or tell the cache whether the copy that it has is still good.</li>
<li>Under certain circumstances — for example, when it’s disconnected from a network — a cache can serve stale responses without checking with the origin server.</li>
</ol>


<p>There are two key players when it comes to apply these rules: <em>freshness</em> and <em>validation</em>. A fresh representation will
be available instantly from the cache, while a validated representation will avoid sending the entire representation
over again if it hasn’t changed.</p>

<h1>Freshness</h1>

<p>Freshness of a resource can be controlled using various HTTP <em>response</em> headers.</p>

<ul>
<li><p><code>Pragma</code> &mdash; The HTTP sepcification does not set any guidelines for <code>Pragma</code> response headers; instead it
discusses <code>Pragma</code> <em>request</em> headers. Using this header will most likely have no effect and the recommendation is to
use the headers below.</p></li>
<li><p><code>Expires</code> &mdash; Using the <code>Expires</code> header you can tell a cache how long the representation will be fresh. After
that time, caches will always check back with the origin server to see if a representation has changed. The only value
valid in an <code>Expires</code> header is a <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP date</a> which is
based by definition on GMT.</p>

<p>  Because the <code>Expires</code> header includes an absolute date and time, the clocks on the origin server and the cache must
be in sync. If they have a different idea of the time, caches might consider stale representations as fresh. This is
the reason you&#8217;re better off using the <code>Cache-Control</code> header.</p></li>
<li><p><code>Cache-Control</code> &mdash; Starting with HTTP 1.1 you can use the <code>Cache-Control</code> header to manage caching. The header
uses many different parameters. I will discuss the most common (see the
<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9">HTTP secification</a> for a complete list of parameters):</p>

<ul>
<li><code>max-age=[seconds]</code> &mdash; specifies the maximum amount of time that a representation will be considered fresh.
[seconds] is the number of seconds from the time of the request you wish the representation to be fresh for.</li>
<li><code>no-cache</code> &mdash; forces caches to submit the request to the origin server for validation before releasing a
cached copy, every time. This is useful to maintain rigid freshness, without sacrificing all of the benefits of
caching.</li>
</ul>
</li>
</ul>


<p>When both <code>Cache-Control</code> and <code>Expires</code> are present, <code>Cache-Control</code> takes precedence. Whenever possible, I recommend
to use <code>Cache-Control</code>.</p>

<h1>Validation</h1>

<p>Validation is used by the cache to check if a representation has changed. By using it, caches avoid having to download
the entire representation when they already have a copy locally, but they’re not sure if it’s still fresh. Validators
are very important; if one isn’t present, and there isn’t any freshness information (<code>Expires</code> or <code>Cache-Control</code>)
available, caches will not store a representation at all.</p>

<p>Basically there are two response headers for validating representations:</p>

<ul>
<li><p><code>Last-Modified</code> &mdash; A <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1">HTTP date</a> stating the
last modification date of the representation. When a cache has a representation stored that includes a <code>Last-Modified</code>
header, it can use it to ask the server if the representation has changed since the last time it was seen, with an
<code>If-Modified-Since</code> request.</p></li>
<li><p><code>ETag</code> &mdash; An unique identified for the representation. Something kind of hashcode. The ETag must change every
time the representation does. The cache can ask the server using a <code>If-None-Match</code> header whether the representation
has changed.</p></li>
</ul>


<p>If the representation did not change the origin server should respond with an empty 304 - not modified response.</p>

<h1>References</h1>

<p>All headers, parameters and rules for HTTP caching are described in great detail in an own chapter of
the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec13.html">HTTP specification</a>. If you plan to implement HTTP caching
in one way or another it&#8217;s a very useful reference.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Components]]></title>
    <link href="http://hpehl.info/web-components.html"/>
    <updated>2013-05-17T12:57:00+02:00</updated>
    <id>http://hpehl.info/web-components</id>
    <content type="html"><![CDATA[<p>I recently watched <a href="https://plus.google.com/+EricBidelman/">Eric Bidelmans</a> <a href="http://www.youtube.com/watch?v=fqULJBBEVQE">presentation</a> on
Web Components at Google IO 13. <a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/explainer/index.html">Web Components</a>
is an effort to bring true modularisation to web development. For the first time you&#8217;ll have encapsulation at the
browser level. No more mess with duplicate IDs or mixed CSS style rules. <!-- more -->The building blocks of Web
Components are</p>

<ul>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html">Shadow DOM</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html">Templates</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/custom/index.html">Custom Elements</a></li>
<li><a href="https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/imports/index.html">HTML Imports</a></li>
</ul>


<p>If you think this is a long way of and available in a few years, then you&#8217;re completely wrong! You can use Web Components
today. And they are already used by the browser vendors under the hood.
This <a href="http://glazkov.com/2011/01/14/what-the-heck-is-shadow-dom/">article</a> from
<a href="http://glazkov.com/about/">Dimitri Glazkov</a> opened my eyes. Many of the new HTML5 elements like
<code>&lt;input type="range"/&gt;</code>, <code>&lt;input type="date"/&gt;</code> or <code>&lt;video/&gt;</code> are implemented using Web Compontents. You can see the
markup behind those elements if you enable Shadow DOM in Chrome Canary. The screenshot below shows the internal markup
of an <code>&lt;input type="date"/&gt;</code> element:</p>

<p><figure class="centered"><img src="http://hpehl.info/images/posts/input_type_date_shadow_dom.png"></figure></p>

<h1>V-Card Sample</h1>

<p>If you want to start creating your own Web Components, I strongly recommend to take a look at
<a href="http://www.polymer-project.org/">Polymer</a>. It&#8217;s a framework for developing Web Components today. It fills out missing
browser implementation with so called polyfills.</p>

<p>Let&#8217;s jump into Web Component development and build a <code>v-card</code> element which renders a business card. The following
code shows the host page containing the custom <code>v-card</code> element. It expects a fullname, a title, several
links and a logo. The parameters are wrapped in regular HTML elements. The class names are taken from the
<a href="http://microformats.org/wiki/hcard">hCard microformat</a> and are used later to select the relevant information.</p>

<figure class='code'><figcaption><span>Host Page  (host.html)</span> <a href='http://hpehl.info/downloads/code/webcomponents/host.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;/path/to/polymer.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;v-card.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;v</span><span class="na">-card</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;fn&quot;</span><span class="nt">&gt;</span>Harald Pehl<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;position&quot;</span><span class="nt">&gt;</span>Senior Software Engineer<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;url&quot;</span> <span class="na">href=</span><span class="s">&quot;http://hpehl.info&quot;</span><span class="nt">&gt;</span>http://hpehl.info<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;twitter&quot;</span> <span class="na">href=</span><span class="s">&quot;https://twitter.com/haraldpehl&quot;</span><span class="nt">&gt;</span>@haraldpehl<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;gplus&quot;</span> <span class="na">href=</span><span class="s">&quot;https://plus.google.com/u/0/112941298216109713269/&quot;</span><span class="nt">&gt;</span>+Harald Pehl<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>    <span class="nt">&lt;img</span> <span class="na">class=</span><span class="s">&quot;logo&quot;</span> <span class="na">src=</span><span class="s">&quot;http://upload.wikimedia.org/wikipedia/it/archive/c/cb/20120516124751!Red_hat_logo.png&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="err">&lt;</span>/v-card&gt;
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>v-card</code> implementation uses its own CSS styles and markup. Thanks to Shadow DOM they don&#8217;t conflict with the
host page. The data for the business card is pulled from the host page using the <code>&lt;content&gt;</code> element and CSS selectors.
Finally the call to <code>Polymer.register(this)</code> takes care of all the polyfill magic to make this work accross all
modern browsers.</p>

<figure class='code'><figcaption><span>Custom Element Implementation  (v-card.html)</span> <a href='http://hpehl.info/downloads/code/webcomponents/v-card.html'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;element</span> <span class="na">name=</span><span class="s">&quot;v-card&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;template&gt;</span>
</span><span class='line'>        <span class="nt">&lt;style&gt;</span>
</span><span class='line'>            <span class="nt">header</span><span class="o">,</span> <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span><span class="o">,</span> <span class="nt">ol</span><span class="o">,</span> <span class="nt">li</span><span class="o">,</span> <span class="nt">img</span> <span class="p">{</span>  <span class="k">margin</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="k">padding</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nt">h1</span><span class="o">,</span> <span class="nt">h2</span> <span class="p">{</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">normal</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">section</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">background</span><span class="o">:</span> <span class="m">#fff</span><span class="p">;</span>
</span><span class='line'>                <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">5px</span><span class="p">;</span>
</span><span class='line'>                <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="o">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">4px</span> <span class="m">2px</span> <span class="n">rgba</span><span class="p">(</span><span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="m">0</span><span class="o">,</span> <span class="o">.</span><span class="m">5</span><span class="p">);</span>
</span><span class='line'>                <span class="k">width</span><span class="o">:</span> <span class="m">30</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>                <span class="k">height</span><span class="o">:</span> <span class="m">15</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">display</span><span class="o">:</span> <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">flex</span><span class="p">;</span>
</span><span class='line'>                <span class="k">display</span><span class="o">:</span> <span class="n">flex</span><span class="p">;</span>
</span><span class='line'>                <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>                <span class="n">align</span><span class="o">-</span><span class="n">items</span><span class="o">:</span> <span class="k">center</span><span class="p">;</span>
</span><span class='line'>                <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'>                <span class="k">justify</span><span class="o">-</span><span class="k">content</span><span class="o">:</span> <span class="n">space</span><span class="o">-</span><span class="n">between</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">header</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">background-color</span><span class="o">:</span> <span class="m">#555</span><span class="p">;</span>
</span><span class='line'>                <span class="k">color</span><span class="o">:</span> <span class="nb">white</span><span class="p">;</span>
</span><span class='line'>                <span class="k">text-align</span><span class="o">:</span> <span class="k">right</span><span class="p">;</span>
</span><span class='line'>                <span class="k">padding</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span> <span class="m">1</span><span class="n">rem</span> <span class="m">1</span><span class="n">rem</span> <span class="m">2</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">header</span> <span class="nt">h1</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1</span><span class="o">.</span><span class="m">5</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nt">header</span> <span class="nt">h2</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nt">ol</span> <span class="p">{</span> <span class="k">font-size</span><span class="o">:</span> <span class="o">.</span><span class="m">8</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nt">li</span> <span class="p">{</span> <span class="k">list-style</span><span class="o">:</span> <span class="k">none</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nc">.logo_container</span> <span class="p">{</span> <span class="k">margin-right</span><span class="o">:</span> <span class="m">1</span><span class="n">rem</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>        <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>        <span class="nt">&lt;section&gt;</span>
</span><span class='line'>            <span class="nt">&lt;header&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h1&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;span.fn&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/h1&gt;</span>
</span><span class='line'>                <span class="nt">&lt;h2&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;span.position&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/h2&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/header&gt;</span>
</span><span class='line'>            <span class="nt">&lt;ol&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;a.url&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;a.twitter&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/li&gt;</span>
</span><span class='line'>                <span class="nt">&lt;li&gt;&lt;content</span> <span class="na">select=</span><span class="s">&quot;a.gplus&quot;</span><span class="nt">&gt;&lt;/content&gt;&lt;/li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/ol&gt;</span>
</span><span class='line'>            <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;logo_container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>                <span class="nt">&lt;content</span> <span class="na">select=</span><span class="s">&quot;img.logo&quot;</span><span class="nt">&gt;&lt;/content&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/section&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script&gt;</span>
</span><span class='line'>        <span class="nx">Polymer</span><span class="p">.</span><span class="nx">register</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/element&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below you can see the <code>v-card</code> Web Component in action. Please note that I&#8217;m unsing CSS3 flexbox to render the
business card. Support for flexbox is somewhat <a href="http://caniuse.com/#feat=flexbox">limited</a>. Chrome should make
no problems, for Firefox you might have to enable <code>layout.css.flexbox.enabled</code> in about:config. All other browsers
will most likely have problems rendering the business card. If that&#8217;s the case here&#8217;s a
<a href="http://hpehl.info/images/posts/v-card_reference.png">reference representation</a>.</p>

<script src="http://hpehl.info/javascripts/polymer.min.js" type="text/javascript"></script>


<p><link rel="import" href="http://hpehl.info/downloads/code/webcomponents/v-card.html"></p>

<p><v-card>
  <span class="fn" style="color: inherit">Harald Pehl</span>
  <span class="position">Senior Software Engineer</span>
  <a class="url" href="http://hpehl.info">http://hpehl.info</a>
  <a class="twitter" href="https://twitter.com/haraldpehl">@haraldpehl</a>
  <a class="gplus" href="https://plus.google.com/u/0/112941298216109713269/">+Harald Pehl</a>
  <img class="logo" src="http://upload.wikimedia.org/wikipedia/it/archive/c/cb/20120516124751!Red_hat_logo.png" width="64" height="64" style="-webkit-border-radius: 0; border-radius: none; -webkit-box-shadow: none; box-shadow: none; border: none;">
</v-card></p>

<p>I hope this simple example shows the potential behind Web Components. I&#8217;m convinced Web Components are the future of
client side web development. If you want to dive deeper into the subject here is a list of useful resources:</p>

<ul>
<li><a href="http://www.youtube.com/watch?v=0g0oOOT86NY">Web Components in Action</a>: Google IO session about Polymer</li>
<li><a href="http://www.x-tags.org/">X-Tags</a>: Polymer counterpart from Mozilla</li>
<li><a href="http://www.dartlang.org/articles/web-ui/">Web UI</a>: Darts implementation for Web Components</li>
<li>Shadow DOM series on HTML5 Rocks:

<ul>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom/">Shadow DOM 101</a></li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/">Shadow DOM 201</a>: CSS and Styling</li>
<li><a href="http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-301/">Shadow DOM 301</a>: Advanced Concepts &amp; DOM APIs</li>
</ul>
</li>
<li><a href="http://html5-demos.appspot.com/static/shadowdom-visualizer/index.html">Shadow DOM Visualizer</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to efficiently write GWT Generators]]></title>
    <link href="http://hpehl.info/how-to-efficiently-write-gwt-generators.html"/>
    <updated>2013-05-07T10:23:00+02:00</updated>
    <id>http://hpehl.info/how-to-efficiently-write-gwt-generators</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Moved Blog to GitHub Pages]]></title>
    <link href="http://hpehl.info/moved-blog-to-github-pages.html"/>
    <updated>2013-05-02T13:55:00+02:00</updated>
    <id>http://hpehl.info/moved-blog-to-github-pages</id>
    <content type="html"><![CDATA[<p>For over three years I was hosting my blog at Blogger.com. Although publishing was quite easy I never was really happy
with the layout and the support for customization.<!--more --></p>

<p>I was looking for a new provider to host my blog. In particular I wanted to</p>

<ul>
<li>write my posts using <a href="http://daringfireball.net/projects/markdown/">markdown</a></li>
<li>be able to have regular pages (like projects, about me, &#8230;)</li>
<li>have full control over the look and feel of my blog</li>
<li>have support for responsive design</li>
<li>host the blog with my own top level domain</li>
</ul>


<p>After some research I stumbled across <a href="http://pages.github.com/">GitHub Pages</a> in combination
with <a href="http://jekyllrb.com/">Jekyll</a> and <a href="http://octopress.org/">Octopress</a>. The setup is really easy and there are
plenty of resources and documentation around Jekyll and Octopress.</p>

<p>As my blog contains a manageable number of posts, I decided to manually migrate them to markdown. But there is also
support for <a href="https://github.com/mojombo/jekyll/wiki/blog-migrations#blogger-blogspot">automatic migration</a>. I didn&#8217;t
migrate the comments of my blog and started from scratch using <a href="http://disqus.com/">Disqus</a>.</p>

<p>I invested quite some time on the look and feel for my new blog. To a great extent I was inspired by
the <a href="https://github.com/amelandri/darkstripes">darkstripes</a> theme and the blog
of <a href="http://melandri.net/">Alessandro Melandri</a>. My navigation was influenced by the website
of <a href="http://www.thibaultjorge.com/en">Thibault Jorge</a>.</p>

<p>The result of the migration is what you&#8217;re looking at. I hope you like it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hosted CI Services]]></title>
    <link href="http://hpehl.info/hosted-ci-services.html"/>
    <updated>2013-04-09T15:31:00+02:00</updated>
    <id>http://hpehl.info/hosted-ci-services</id>
    <content type="html"><![CDATA[<p>I was looking for a hosted continuous integration service to build my GitHub projects. My requirements are painless
GitHub integration, easy setup and a simple and straightforward UI. I looked at two services:
<a href="http://drone.io/">Drone.io</a> and <a href="https://travis-ci.org/">Travis CI</a>. In this post I will outline my very personal
experience with it.<!-- more --></p>

<p>Both Drone.io and Travis CI offer very good GitHub integration. It&#8217;s fairly simple to connect your GitHub projects.
Especially Drone.io does a very good job. Link your GitHub account, choose your project and language and you&#8217;re ready
to go.</p>

<p>Unfortunatley neither Drone.io nor Travis CI can deploy artifacts to external repositories like OSS Sonatype out of
the box (though there&#8217;s a <a href="https://gist.github.com/neothemachine/4060735">workaround</a> for Travis). By now I&#8217;m building
and deploying dependent projects manually from my box.</p>

<p>To sum it up these are pros/cons for me:</p>

<ol>
<li>Drone.io

<ul>
<li>Pros

<ul>
<li>Very simple and easy to use UI.</li>
<li>Great GitHub integration</li>
<li>Supports alos BitBucket and GoogleCode</li>
</ul>
</li>
<li>Cons

<ul>
<li>Once a job / project was setup you cannot delete it anymore (as least I don&#8217;t know how?)</li>
<li>Limited configuration options</li>
</ul>
</li>
</ul>
</li>
<li>Travis CI

<ul>
<li>Pros

<ul>
<li>Powerful configuration options (.travis.yml)</li>
<li>Great range of supported languages</li>
<li>Supports multiple JVM</li>
</ul>
</li>
<li>Cons

<ul>
<li>Some extra configuration steps to get started</li>
</ul>
</li>
</ul>
</li>
</ol>


<p>Feel free to totally disagree with me or comment your own experience.</p>

<h3>Update</h3>

<p>You can delete a project in Drone.io by going to your project&#8217;s Settings &gt; Repository page. Thanks for the hint Brad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing around with Dart Isolates]]></title>
    <link href="http://hpehl.info/playing-around-with-dart-isolates.html"/>
    <updated>2013-04-08T22:26:00+02:00</updated>
    <id>http://hpehl.info/playing-around-with-dart-isolates</id>
    <content type="html"><![CDATA[<p>I was looking for a way to implement some kind of dynamic plug-in system in Dart. The idea was to load Dart code on
demand into an isolate using <a href="http://api.dartlang.org/docs/releases/latest/dart_isolate.html#spawnUri">spawnUri()</a>.
It turns out that this function is implemented in the Dart VM but neither in Dartium nor does it compile down to
JavaScript.<!-- more --></p>

<p>Falling back to <a href="http://api.dartlang.org/docs/releases/latest/dart_isolate.html#spawnFunction">spawnFunction()</a> works
as expected in the browser but it turns out that isolates are not allowed to access / change the DOM. This reduces
isolates to dumb worker functions. Plug-ins which make contributions to the UI are not possible using this approach.</p>

<p>I created some test scripts for the browser and the VM to test the possibilities you have with isolates. You can
find them at GitHub: <a href="https://github.com/hpehl/dart-isolates">https://github.com/hpehl/dart-isolates</a>. Let me know what
you think.</p>
]]></content>
  </entry>
  
</feed>
