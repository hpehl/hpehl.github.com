<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Harald Pehl]]></title>
  <link href="http://hpehl.github.io/atom.xml" rel="self"/>
  <link href="http://hpehl.github.io/"/>
  <updated>2013-04-23T09:34:23+02:00</updated>
  <id>http://hpehl.github.io/</id>
  <author>
    <name><![CDATA[Harald Pehl]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hosted CI Services]]></title>
    <link href="http://hpehl.github.io/hosted-ci-services.html"/>
    <updated>2013-04-09T15:31:00+02:00</updated>
    <id>http://hpehl.github.io/hosted-ci-services</id>
    <content type="html"><![CDATA[<p>I was looking for a hosted continuous integration service to build my GitHub projects. My requirements are painless
GitHub integration, easy setup and a simple and straightforward UI. I looked at two services:
<a href="http://drone.io/">Drone.io</a> and <a href="https://travis-ci.org/">Travis CI</a>. In this post I will outline my very personal
experience with it.</p>

<p>Both Drone.io and Travis CI offer very good GitHub integration. It&#8217;s fairly simple to connect your GitHub projects.
Especially Drone.io does a very good job. Link your GitHub account, choose your project and language and you&#8217;re ready
to go.</p>

<p>Unfortunatley neither Drone.io nor Travis CI can deploy artifacts to external repositories like OSS Sonatype out of
the box (though there&#8217;s a <a href="https://gist.github.com/neothemachine/4060735">workaround</a> for Travis). By now I&#8217;m building
and deploying dependent projects manually from my box.</p>

<p>To sum it up these are pros/cons for me:</p>

<ol>
<li>Drone.io

<ul>
<li>Pros

<ul>
<li>Very simple and easy to use UI.</li>
<li>Great GitHub integration</li>
<li>Supports alos BitBucket and GoogleCode</li>
</ul>
</li>
<li>Cons

<ul>
<li>Once a job / project was setup you cannot delete it anymore (as least I don&#8217;t know how?)</li>
<li>Limited configuration options</li>
</ul>
</li>
</ul>
</li>
<li>Travis CI

<ul>
<li>Pros

<ul>
<li>Powerful configuration options (.travis.yml)</li>
<li>Great range of supported languages</li>
<li>Supports multiple JVM</li>
</ul>
</li>
<li>Cons

<ul>
<li>Some extra configuration steps to get started</li>
</ul>
</li>
</ul>
</li>
</ol>


<p>Feel free to totally disagree with me or comment your own experience.</p>

<p><strong>Update</strong>
You can delete a project in Drone.io by going to your project&#8217;s Settings &gt; Repository page. Thanks for the hint Brad.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Playing around with Dart Isolates]]></title>
    <link href="http://hpehl.github.io/playing-around-with-dart-isolates.html"/>
    <updated>2013-04-08T22:26:00+02:00</updated>
    <id>http://hpehl.github.io/playing-around-with-dart-isolates</id>
    <content type="html"><![CDATA[<p>I was looking for a way to implement some kind of dynamic plug-in system in Dart. The idea was to load Dart code on
demand into an isolate using <a href="http://api.dartlang.org/docs/releases/latest/dart_isolate.html#spawnUri">spawnUri()</a>.
It turns out that this function is implemented in the Dart VM but neither in Dartium nor does it compile down to
JavaScript.</p>

<p>Falling back to <a href="http://api.dartlang.org/docs/releases/latest/dart_isolate.html#spawnFunction">spawnFunction()</a> works
as expected in the browser but it turns out that isolates are not allowed to access / change the DOM. This reduces
isolates to dumb worker functions. Plug-ins which make contributions to the UI are not possible using this approach.</p>

<p>I created some test scripts for the browser and the VM to test the possibilities you have with isolates. You can
find them at GitHub: <a href="https://github.com/hpehl/dart-isolates">https://github.com/hpehl/dart-isolates</a>. Let me know what
you think.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Independent JBoss Admin Console]]></title>
    <link href="http://hpehl.github.io/independent-jboss-admin-console.html"/>
    <updated>2013-03-05T21:43:00+01:00</updated>
    <id>http://hpehl.github.io/independent-jboss-admin-console</id>
    <content type="html"><![CDATA[<p>We&#8217;re currently working on a new feature for the JBoss Admin Console. The console should become independent from the
rest of the JBoss AS distribution. As the console is built with GWT and &#8220;merely&#8221; consists of static resources like
HTML, JavaScript and CSS, the idea is to have a dedicated host which serves these resources. When loading the console
the user can manage a list of server instances and chooses the one he likes to connect to. The server instances are
stored in the browsers <a href="http://www.w3.org/TR/webstorage/">local storage</a>, so they will be available the next time the
console is launched:</p>

<p><img src="http://hpehl.github.io/images/posts/select_server_instance.png"></p>

<p>Using this kind of setup brings us several advantages:</p>

<ul>
<li>We can update the console independently from the rest of the AS code base</li>
<li>We can deploy the console to various (web)app stores like Firefox Marketplace or Chrome Web Store</li>
<li>We can have different console versions with different feature sets (nightly, beta, stable)</li>
<li>Using one console you can connect to different server instances running different setups (development, staging, production)</li>
</ul>


<h1>CORS</h1>

<p>The console talks to the domain controller (DC) using the HTTP management API. Now when the console and the DC live
on different hosts, the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a> (SOP) throws a monkey
wrench in our efforts. Luckily we&#8217;re not the first ones confronted with this problem. There are several ways to solve
SOP restrictions:</p>

<ul>
<li>Server Side Proxies</li>
<li><a href="http://en.wikipedia.org/wiki/JSONP">JSON with padding</a> (JSONP)</li>
<li><a href="http://www.w3.org/TR/cors/">Cross-Origin Resource Sharing</a> (CORS)</li>
</ul>


<h2>Client</h2>

<p>According to <a href="http://caniuse.com/#search=cors">caniuse.com</a> CORS is implemented in most of the browsers. CORS knows
two different types of requests.</p>

<ol>
<li><p>Simple requests:</p>

<p> A request that only uses <code>GET</code> or <code>POST</code>. If <code>POST</code> is used to send data to the server, the content type of the data
sent to the server with the HTTP <code>POST</code> request is one of <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code>
or <code>text/plain</code>. The request must not contain custom headers (such as <code>X-Modified</code>, etc.)</p></li>
<li><p>Preflighted requests</p>

<p> A request that uses methods other than <code>GET</code> or <code>POST</code>. Also, if <code>POST</code> is used to send request data with a
content type other than <code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code> or <code>text/plain</code>, e.g. if the
<code>POST</code> request sends an XML payload to the server using <code>application/xml</code> or <code>text/xml</code>, then the request is a
preflighted request. Furthermore if the request contains custom headers, it&#8217;s preflighted.</p></li>
</ol>


<p>Unlike simple requests, preflighted requests first send an HTTP <code>OPTIONS</code> request header to the resource on the other
domain, in order to determine whether the actual request is safe to send. Since the console uses <code>POST</code> with a
content type of <code>application/dmr-encoded</code> all requests are preflighted requests. This will be important when looking
at the server side.</p>

<p>Common to all requests is that the browser adds the request header <code>Origin</code>. The value of this header is the site
that served the page. For example, suppose a page on http://www.example-social-network.com attempts to access a
user&#8217;s data in online-personal-calendar.com. If the browser implements CORS, the following request header would be sent:</p>

<pre><code>Origin: http://www.example-social-network.com
</code></pre>

<h2>Server</h2>

<p>It is up to the server to decide which origins are allowed. When the server accepts cross-origin requests, it sends an
<code>Access-Control-Allow-Origin</code> header in its response. The value of the header indicates what origin sites are allowed.
For example, a response to the previous request would contain the following:</p>

<pre><code>Access-Control-Allow-Origin: http://www.example-social-network.com.
</code></pre>

<p>For the JBoss AS this implies changes to the class <code>org.jboss.as.domain.http.server.DomainApiHandler</code>. This class
handles HTTP requests to the management API. The modified version accepts preflighted <code>OPTIONS</code> requests and sets the
relevant response headers.</p>

<h2>Authentication</h2>

<p>The console uses digest authentication. This must continue to work when doing cross-origin requests. By default,
in cross-origin <code>XMLHttpRequest</code> invocations, browsers will not send credentials. A specific flag called
<code>withCredentials</code> has to be set on the <code>XMLHttpRequest</code> object when it is invoked. Unfortunately GWTs implementation
of the JavaScript <code>XMLHttpRequest</code> object does
<a href="https://code.google.com/p/google-web-toolkit/issues/detail?id=7677">not yet implement</a> this flag. For the time being
we need to include <code>withCredentials</code> by ourselves.</p>

<p>The next challenge is to trigger the login dialog when accessing protected resources. Unfortunately when it comes to
authentication browsers handle CORS quite differently. There are some workarounds depending on which browser is used:</p>

<ul>
<li>Chrome <a href="http://blog.chromium.org/2011/06/new-chromium-security-features-june.html">prevents basic authentication from a different origin as a phishing attack</a> period.
The only way to get around that is to start Chrome using the command line option <code>--allow-cross-origin-auth-prompt</code>.</li>
<li>Firefox makes no problems when it comes to display the login dialog (well done guys!)</li>
<li>Safari won&#8217;t show the login dialog. You can get around that by inserting a hidden <code>&lt;iframe&gt;</code> element linking to the
protected url. This will trigger the authentication popup and once the user has authenticated, you can execute direct
<code>XMLHttpRequests</code> as usual.</li>
<li>Internet Explorer somewhat support CORS in IE8 and IE9 using the <code>XDomainRequest</code> object (but has limitations).</li>
</ul>


<p>Finally there&#8217;s an issue related to preflighted <code>OPTIONS</code> requests on the server side. According to the specification
those requests must</p>

<blockquote><p>exclude user credentials.</p></blockquote>

<p>Hence these requests are blocked by the server with &#8220;401 Unauthorized&#8221;. As a workaround the authenticators in the AS
code base must let pass preflighted <code>OPTIONS</code> requests.</p>

<h2>Status Quo</h2>

<p>At the moment a first preview of an independent console is available at
OpenShift: <a href="https://console-hpehl.rhcloud.com">https://console-hpehl.rhcloud.com</a>. Please note that you must have a
CORS enabled server instance running in order to connect from the console. You can build one by yourself using the
&#8220;cors&#8221; branch of the AS code base: <a href="https://github.com/hpehl/jboss-as/tree/cors">https://github.com/hpehl/jboss-as/tree/cors</a>.
Follow the steps in the <a href="https://github.com/hpehl/jboss-as/tree/cors#readme">README</a> to build the server.</p>

<p>Due to the limitations regarding authentication and CORS, the solution described here will only work in Firefox and
Safari. If you want to use Chrome make sure to use the <code>--allow-cross-origin-auth-prompt</code> command line option.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Job]]></title>
    <link href="http://hpehl.github.io/new-job.html"/>
    <updated>2012-10-02T12:52:00+02:00</updated>
    <id>http://hpehl.github.io/new-job</id>
    <content type="html"><![CDATA[<p>Today is my first day in my new job at RedHat. I&#8217;m excited to join the EAP core team and looking forward to the things to come&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Velocity to generate code in GWT]]></title>
    <link href="http://hpehl.github.io/how-to-use-velocity-to-generate-code-in-gwt.html"/>
    <updated>2012-01-28T21:44:00+01:00</updated>
    <id>http://hpehl.github.io/how-to-use-velocity-to-generate-code-in-gwt</id>
    <content type="html"><![CDATA[<p>The JSON/XML mapper <a href="https://github.com/hpehl/piriti">Piriti</a> is heavily based on deferred binding and code generation.
As I started to implement code generators in Piriti I looked around how other projects deal with it and read through
the <a href="https://developers.google.com/web-toolkit/doc/latest/DevGuideCodingBasicsDeferred">official documentation</a> on the
GWT site. The usual way to generate code is to extend <code>com.google.gwt.core.ext.Generator</code> and then call
<code>GeneratorContext.tryCreate(TreeLogger, String, String)</code>. The returned PrintWriter is then often wrapped into
some kind of <a href="https://code.google.com/p/google-web-toolkit/source/browse/trunk/user/src/com/google/gwt/uibinder/rebind/IndentedWriter.java">IndentedWriter</a>
like the one used by GWT itself. This class adds methods to indent and unindent code and supports <code>printf()</code> like
behaviour. Finally the writer is used to generate all code. This in turn results in code which looks like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s %s = null;&quot;</span><span class="o">,</span> <span class="n">parameterizedValueType</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;List&lt;Element&gt; %s = filterElements(element.selectNodes(\&quot;%s\&quot;));&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="n">elements</span><span class="o">,</span> <span class="n">property</span><span class="o">.</span><span class="na">getPathOrName</span><span class="o">());</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;if (!%s.isEmpty()) {&quot;</span><span class="o">,</span> <span class="n">elements</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s = new %s&lt;%s&gt;();&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">,</span> <span class="n">collectionImplementation</span><span class="o">,</span> <span class="n">elementType</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">property</span><span class="o">.</span><span class="na">isConverter</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// even more writer.write() statements</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;for (Element currentElement : %s) {&quot;</span><span class="o">,</span> <span class="n">elements</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s currentValue = null;&quot;</span><span class="o">,</span> <span class="n">elementType</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;XmlReader&lt;%1$&gt;; currentReader = xmlRegistry.getReader(%1$s.class);&quot;</span><span class="o">,</span> <span class="n">elementType</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;if (currentReader != null) {&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;currentValue = currentReader.read(currentElement);&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;if (currentValue != null) {&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">indent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;%s.add(currentValue);&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">outdent</span><span class="o">();</span>
</span><span class='line'><span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">&quot;}&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>I can&#8217;t help, but this code somehow reminds me of the old times, where we generated HTML code in servlets.
This approach might work as long as the amount of generated code is small. In Piriti the code generation process
is somewhat complex and distributed over several classes. Changing the generated code became very difficult and
error-prone. Only the correct use of writer.indent() and writer.outdent() is not a trivial task. To some extent
this problem can be solved by the use of an abstract base class, which contains common code. The generated class
would extend from the abstract base class. But at the end of the day you have to generate some code in the concrete
subclass.</p>

<h1>Velocity to the rescue</h1>

<p><a href="http://velocity.apache.org/engine/releases/velocity-1.7/">Velocity</a> is a Java-based template engine. It permits
anyone to use a simple yet powerful template language to reference objects defined in Java code. Velocity supports
for loops, if-then-else conditions and custom macros. Templates can include other templates. This way you can put
common code in extra templates and reuse it in other templates. Velocity is mainly used in web projects for HTML
generation. Another common use case is to generate email bodies. But there&#8217;s no reason not to use Velocity for code
generation in GWT.</p>

<p>Doing so the above code snippet becomes something like that:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">$parameterizedValueType</span> <span class="n">$value</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Element</span><span class="o">&gt;</span> <span class="n">$elements</span> <span class="o">=</span> <span class="n">filterElements</span><span class="o">(</span><span class="n">element</span><span class="o">.</span><span class="na">selectNodes</span><span class="o">(</span><span class="s">&quot;$property.pathOrName&quot;</span><span class="o">));</span>
</span><span class='line'><span class="k">if</span> <span class="o">(!</span><span class="n">$</span><span class="o">{</span><span class="n">elements</span><span class="o">}.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">$value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">$collectionImplementation</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">$elementType</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;();</span>
</span><span class='line'>    <span class="err">#</span><span class="k">if</span> <span class="o">(</span><span class="n">$property</span><span class="o">.</span><span class="na">converter</span><span class="o">)</span> <span class="err">#</span><span class="n">createConverter</span><span class="o">()</span> <span class="err">#</span><span class="n">end</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Element</span> <span class="n">currentElement</span> <span class="o">:</span> <span class="n">$elements</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">$elementType</span> <span class="n">currentValue</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">XmlReader</span><span class="o">&lt;</span><span class="n">$elementType</span><span class="o">&gt;</span> <span class="n">currentReader</span> <span class="o">=</span> <span class="n">xmlRegistry</span><span class="o">.</span><span class="na">getReader</span><span class="o">(</span><span class="n">$</span><span class="o">{</span><span class="n">elementType</span><span class="o">}.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentReader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">currentValue</span> <span class="o">=</span> <span class="n">currentReader</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">currentElement</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">currentValue</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">$</span><span class="o">{</span><span class="n">value</span><span class="o">}.</span><span class="na">add</span><span class="o">(</span><span class="n">currentValue</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you compare the two code snippets you get the idea! The velocity based code is much more readable. As you can see
the velocity template contains variable references like $elements. Before the template is rendered all necessary
variables must be put into the so-called Velocity context which is more or less a big map. If the variable refers to
a java object you can use its properties and even call methods.</p>

<p>To use Velocity for code generation you have to setup the Velocity engine, create the Velocity context and merge the
template. In Piriti the engine is configured with the following properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">velocimacro</span><span class="o">.</span><span class="na">library</span> <span class="o">=</span> <span class="n">name</span><span class="o">/</span><span class="n">pehl</span><span class="o">/</span><span class="n">piriti</span><span class="o">/</span><span class="n">rebind</span><span class="o">/</span><span class="n">propertyMacros</span><span class="o">.</span><span class="na">vm</span>
</span><span class='line'><span class="n">runtime</span><span class="o">.</span><span class="na">log</span><span class="o">.</span><span class="na">logsystem</span><span class="o">.</span><span class="na">class</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">pehl</span><span class="o">.</span><span class="na">piriti</span><span class="o">.</span><span class="na">rebind</span><span class="o">.</span><span class="na">VelocityLogger</span>
</span><span class='line'><span class="n">input</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="n">output</span><span class="o">.</span><span class="na">encoding</span> <span class="o">=</span> <span class="n">UTF</span><span class="o">-</span><span class="mi">8</span>
</span><span class='line'><span class="n">resource</span><span class="o">.</span><span class="na">manager</span><span class="o">.</span><span class="na">logwhenfound</span> <span class="o">=</span> <span class="kc">true</span>
</span><span class='line'><span class="n">resource</span><span class="o">.</span><span class="na">manager</span><span class="o">.</span><span class="na">defaultcache</span><span class="o">.</span><span class="na">size</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">resource</span><span class="o">.</span><span class="na">loader</span> <span class="o">=</span> <span class="n">cp</span>
</span><span class='line'><span class="n">cp</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">loader</span><span class="o">.</span><span class="na">class</span> <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">velocity</span><span class="o">.</span><span class="na">runtime</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">loader</span><span class="o">.</span><span class="na">ClasspathResourceLoader</span>
</span><span class='line'><span class="n">cp</span><span class="o">.</span><span class="na">resource</span><span class="o">.</span><span class="na">loader</span><span class="o">.</span><span class="na">cache</span> <span class="o">=</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally the code generation process is reduced to the following lines:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PrintWriter</span> <span class="n">printWriter</span> <span class="o">=</span> <span class="n">generatorContext</span><span class="o">.</span><span class="na">tryCreate</span><span class="o">(</span><span class="n">treeLogger</span><span class="o">,</span> <span class="n">somePackage</span><span class="o">,</span> <span class="n">implName</span><span class="o">);</span>
</span><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">printWriter</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">VelocityContext</span> <span class="n">context</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VelocityContext</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// Put all neccesarry objects into the velocity context</span>
</span><span class='line'>    <span class="n">context</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="o">...);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span>
</span><span class='line'>        <span class="s">&quot;name/pehl/piriti/rebind/velocity.properties&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Properties</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">();</span>
</span><span class='line'>    <span class="n">properties</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span><span class='line'>    <span class="n">VelocityEngine</span> <span class="n">velocityEngine</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VelocityEngine</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span><span class='line'>    <span class="n">velocityEngine</span><span class="o">.</span><span class="na">mergeTemplate</span><span class="o">(</span><span class="s">&quot;someTemplate.vm&quot;</span><span class="o">,</span> <span class="s">&quot;UTF-8&quot;</span><span class="o">,</span> <span class="n">context</span><span class="o">,</span> <span class="n">printWriter</span><span class="o">);</span>
</span><span class='line'>    <span class="n">generatorContext</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">treeLogger</span><span class="o">,</span> <span class="n">printWriter</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you want to delve deeper into the code generation process in <a href="https://github.com/hpehl/piriti">Piriti</a>, check out
the trunk and take a look into the code.</p>
]]></content>
  </entry>
  
</feed>
