<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jboss | Harald Pehl]]></title>
  <link href="http://hpehl.info/blog/categories/jboss/atom.xml" rel="self"/>
  <link href="http://hpehl.info/"/>
  <updated>2014-11-21T15:01:47+01:00</updated>
  <id>http://hpehl.info/</id>
  <author>
    <name><![CDATA[Harald Pehl]]></name>
    <email><![CDATA[harald.pehl@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Local Search in the Management Console]]></title>
    <link href="http://hpehl.info/search_in_console.html"/>
    <updated>2014-11-21T10:21:00+01:00</updated>
    <id>http://hpehl.info/search_in_console</id>
    <content type="html"><![CDATA[<p>Today <a href="http://wildfly.org/news/2014/11/20/WildFly82-Final-Released/">WildFly 8.2.0.Final</a> was released. It comes with a number of improvements and bug fixes over the last release, 8.1.0.Final. Regarding the management console, Heiko Braun already gave a glimpse of some of new features in his recent <a href="http://hbraun.info/2014/10/updated-management-console-in-wildfly-8-2/">blog post</a>. Today I'd like to introduce yet another feature which was introduced in WildFyl 8.2: Local Search.<!-- more --></p>

<p>With every new feature added to WildFly, the number of screens and options in the management console grows as well. Sometimes it's hard to quickly find the right screen where you can modify your JMS topics or monitor that data source connection pool. That's why we added a search feature to the management console. It's built around the idea to have an index which contains reasonable keywords and the descriptions from the underlying <a href="http://wildscribe.github.io/">management model</a>.</p>

<p>It's super fast, because the index is built and stored locally inside the browser. That's why you need a modern browser with support for <a href="http://caniuse.com/#search=localstorage">local storage</a> to use the search. Don't worry about the size of the index, it's quite compact: For WildFly 8.2 running in domain mode the index will be roughly 10 KByte large, so it's no a big deal to keep the index in local storage. For those who want to know all the nitty-gritty details, the local search is based on the JavaScript framework <a href="http://lunrjs.com/">lunr.js</a>. In a nutshell lunr.js is slimmed full-text search engine ready to be used in your browser. But enough with all these implementation details. Let's see how this all works:</p>

<p>To enter the search press the search link in the upper right corner of the management console:</p>

<p><figure class="centered"><img src="/images/posts/local_search_header.png" title="Local Search" ></figure></p>

<p>The first time you enter the search, the index is automatically created based on the WildFly version, the operation mode (standalone or domain) and the language. During index creation the descriptions of the management model is fetched from the server side and stored in the index. Depending on your setup and network latency this make take a few seconds.</p>

<p><figure class="centered"><img src="/images/posts/local_search_index_setup.png" title="Indexing..." ></figure></p>

<p>Once the index is ready you can start searching. As you type your query the results will update dynamically:</p>

<p>
<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('wdb3W-G-9WI');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/wdb3W-G-9WI?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/wdb3W-G-9WI/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=wdb3W-G-9WI" id="wdb3W-G-9WI" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">Local Search in the Management Console</div>
</a>
<div class="video-info" >Shows the local search in the WildFly Management Console in action.</div>
</div>

</p>

<br/>


<p>Give the new local search a try and let us know what you think!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WildFly Dockerfiles]]></title>
    <link href="http://hpehl.info/wildfly-dockerfiles.html"/>
    <updated>2013-11-28T14:40:00+01:00</updated>
    <id>http://hpehl.info/wildfly-dockerfiles</id>
    <content type="html"><![CDATA[<p>For the last couple of days I have been playing with <a href="http://www.docker.io">Docker</a>. In a nutshell Docker is a tool
that lets you create images and run so called containers. It uses <a href="http://lxc.sourceforge.net/">Linux Containers</a> (LXC)
under the hood. What appears to be yet another virtualization solution, is in fact a very lightweight way to setup,
manage and run "processes in a box".<!-- more --></p>

<p>Docker comes with a great <a href="http://www.docker.io/gettingstarted/">tutorial</a> and a
reasonable <a href="http://docs.docker.io/en/latest/">documentation</a>. So I won't go into any details here. There are also some
very good <a href="http://goldmann.pl/blog/tags/docker/">posts</a> from <a href="http://goldmann.pl/blog/">Marek Goldmann</a> which helped
me a lot getting started. In the remaining part of this post I will show you how to setup both a WildFly standalone
server and a domain with multiple hosts and servers. Here we go!</p>

<h1>Preperations</h1>

<p>I assume you already have installed Docker. If not please refer to the
<a href="http://www.docker.io/gettingstarted/#h_installation">offical documentation</a> on how to setup Docker on your machine.
The following assumes you're using Docker 0.7.0.</p>

<p>I've put together a repository which is based on Ubuntu and contains Java7 and WildFly 8.0.0.Beta1. It does not contain
any commands or entrypoints, but is intended to serve as a base repository for the other WildFly related repositories.
You can grap it and use it as a starting point:</p>

<p><code>
$ docker pull hpehl/wildfly
$ docker run -i -t hpehl/wildfly /bin/bash
</code></p>

<h1>Standalone</h1>

<p>To quickly run a standalone server, I've put together the repository <code>hpehl/wildfly-standalone</code>. It is based on
<code>hpehl/wildfly</code> and starts an unmodified standalone server. The standalone server exposes the following ports:</p>

<ul>
<li>8080 for HTTP</li>
<li>9990 for HTTP based management and</li>
<li>9999 for native management</li>
</ul>


<p>You can use the user <code>admin:passw0rd_</code> to access the management interfaces. Running it with</p>

<p><code>
docker run -p 49080:8080 -p 49090:9990 -d hpehl/wildfly-standalone
</code></p>

<p>will start the server. You can check the status with <code>docker logs &lt;CONTAINER_ID&gt;</code>. After a short while you should
be able to access the server using http://localhost:49080</p>

<p><figure class="centered"><img src="/images/posts/docker_wildfly_standalone.png" title="WildFly standalone server running inside a Docker container" ></figure></p>

<h1>Domain</h1>

<p>To setup a domain use the repository <code>hpehl/wildfly-domain</code>. It contains different tags to start a domain controller
and up to four hosts. Tags are a way to reference different images inside a repository. The syntax for tags is
<code>&lt;repository&gt;:&lt;tag&gt;</code>. When no tag is given, Docker uses the tag <code>latest</code>. The domain repository consists of these tags:</p>

<ul>
<li><code>hpehl/wildfly-domain:dc</code>: The domain controller with five servers. The domain controller defines three server groups:

<ul>
<li>deployment</li>
<li>staging</li>
<li>production</li>
</ul>
</li>
<li><code>hpehl/wildfly-domain:hostA</code>: First host with three servers</li>
<li><code>hpehl/wildfly-domain:hostB</code>: Second host with three servers</li>
<li><code>hpehl/wildfly-domain:hostC</code>: Third host with two servers</li>
<li><code>hpehl/wildfly-domain:hostD</code>: Fourth host with two servers</li>
</ul>


<p>Docker has a great feature which enables inter-container communication. This is done by specifying the <code>link</code>
parameter. When linking two containers Docker will use the exposed ports of the container to create a secure tunnel
for the parent to access. This feature is used in the WildFly domain for the communication between the domain
controller and the hosts.</p>

<p>In order to setup and run the domain, you have to first start the domain controller. After that you can start as many
hosts as you like and link them to the domain controller. Be sure to use "dc" as name (using another name won't work):</p>

<pre><code>docker run -name wildfly-dc -d hpehl/wildfly-domain:dc
docker run -name hostA -link wildfly-dc:dc -d hpehl/wildfly-domain:hostA
docker run -name hostB -link wildfly-dc:dc -d hpehl/wildfly-domain:hostB
docker run -name hostC -link wildfly-dc:dc -d hpehl/wildfly-domain:hostC
docker run -name hostD -link wildfly-dc:dc -d hpehl/wildfly-domain:hostD
</code></pre>

<p>Some notes:</p>

<ul>
<li>The domain controller exposes the standard ports

<ul>
<li>8080 for HTTP</li>
<li>9990 for HTTP based management and</li>
<li>9999 for native management</li>
</ul>
</li>
<li>The hosts expose just port 8080</li>
<li>The domain controller defines the user <code>admin:passw0rd_</code>, which can be used for management</li>
</ul>


<h1>Troubleshooting</h1>

<p>Unfortunately in the current WildFly Beta there's a problem if you want to access the admin console of a WildFly
instance running inside a Docker container. I assume this will be fixed once WildFly GA is available. For the time
being you can only use the CLI.</p>

<p>If you need the console, you can use for instance EAP 6.2 which is not affected by this
limitation. You can find <a href="https://github.com/hpehl/dockerfiles/tree/master/eap62">Dockerfiles</a> on my GitHub account
using EAP. However please note that there's no EAP distribution included. You have to provide one on your own.</p>

<h1>Summary</h1>

<p>Using Docker it is really easy to setup a WildFly domain. Adding / removing hosts is just a matter of
starting / stopping Docker containers.</p>

<p>Docker offers also a rich API. So setting up your domain could also be done using a nifty web front-end where you
'click together' your server groups, hosts and servers. The Dockerfiles, images and containers would then be created
based on your input - all fully automatically!</p>

<h1>Resources</h1>

<ul>
<li>WildFly repositories on index.docker.io: https://index.docker.io/u/hpehl/</li>
<li>Related Dockerfiles: https://github.com/hpehl/dockerfiles/tree/master/wildfly</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JBoss One Day Talk]]></title>
    <link href="http://hpehl.info/jboss-one-day-talk.html"/>
    <updated>2013-10-24T09:45:00+02:00</updated>
    <id>http://hpehl.info/jboss-one-day-talk</id>
    <content type="html"><![CDATA[<p>Yesterday I presented "WildFly 8 - the artist formerly known as JBoss AS" at the
<a href="http://onedaytalk.org/">JBoss One Day Talk</a> in Munich. Furthermore I had the chance to give a brief introduction to
"DMR.scala / DMR.repl".</p>

<p>I really enjoyed attending the conference. It was well organized and packed with great talks. Here are the slides of my talks (partly in German):</p>

<ul>
<li><a href="/downloads/onedaytalk_wildfly8.pdf">WildFly 8 - the artist formerly known as JBoss AS</a></li>
<li><a href="http://slid.es/hpehl/dmrscala">DMR.scala / DMR.repl</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Polyglot DMR]]></title>
    <link href="http://hpehl.info/using-dmr-with-scala.html"/>
    <updated>2013-09-28T00:20:00+02:00</updated>
    <id>http://hpehl.info/using-dmr-with-scala</id>
    <content type="html"><![CDATA[<p>The <strong>d</strong>ynamic or <strong>d</strong>etyped <strong>m</strong>odel <strong>r</strong>epresentation (DMR) is an API to interact with the management model of a
running WildFly instance. There's an Java API available at <a href="https://github.com/jbossas/jboss-dmr">https://github.com/jbossas/jboss-dmr</a> which is described in
the <a href="https://docs.jboss.org/author/display/WFLY8/Detyped+management+and+the+jboss-dmr+library">WildFly Wiki</a>. Though
the Java API is very rich and powerful it is somewhat hard to write scripts that perform useful tasks like</p>

<ul>
<li>Periodically read the memory and send an SMS / tweet / email when a threshold is reached</li>
<li>Rollout a deployment over all servers in a cluster</li>
<li>Monitor the state of an application<!--more--></li>
</ul>


<p>To address this challenges we created different client libraries for different languages:</p>

<h1>Scala</h1>

<p>The scala library is hosted at <a href="https://github.com/hpehl/dmr.scala">DMR.scala</a>. The
<a href="https://github.com/heiko-braun/dmr-repl">DMR.repl</a> library leverages the Scala REPL to execute DMR operations in
a very interactive way.</p>

<h1>Dart</h1>

<p>Using <a href="https://github.com/hal/dmr.dart">DMR.dart</a> you can run DRM operations in Dart. Both executing individual
operations, as well as writing whole web applications is possible.</p>

<h1>Node.js</h1>

<p>The library for Node.js is called <a href="https://github.com/hal/dmr.js">DMR.js</a>.</p>

<h1>Ideas</h1>

<p>Bringing the DMR library to different languages opens up many possibilities. We can think of a repository with
(parameterized) management scripts, an integration with Gist / Paste.bin to quickly share your operations with
your co-workers, ... We'd love to heear your feedback and suggestions on this!</p>

<h1>Open Issues</h1>

<p>One of the main challenges when using the different client libraries is authentication. Right now there's a workaround
to use a <a href="/independent-jboss-admin-console.html">CORS enables JBoss AS instance</a> which is however a bit out of date.
IMO the solution for this is to bring OAuth support to WildFly. For the time being the usage of the client libraries is
somewhat limeted and if any feasible when running on the same host.</p>

<h1>Conclusion</h1>

<p>The different libraries are very much work in progress, but we'd love to here your feedback!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Send Mails from OpenShift]]></title>
    <link href="http://hpehl.info/send-mails-from-openshift.html"/>
    <updated>2013-08-04T19:42:00+02:00</updated>
    <id>http://hpehl.info/send-mails-from-openshift</id>
    <content type="html"><![CDATA[<p>OpenShift is a great place to host your applications. In this post I'm going to show you how you can easily send mails
from your JEE applications running on JBoss. For sending mails I'm going to configure an external SMTP server. Any SMTP
server will do, I'm going to use GMail.<!-- more --></p>

<p>In case you don't already have an application ready, create one selecting the JBoss AS 7 cartridge. Clone the git
repository and open the JBoss standalone configuration: <code>.openshift/config/standalone.xml</code>. Look for the mail subsystem
which should look like this:</p>

<p>```xml
<subsystem xmlns="urn:jboss:domain:mail:1.0"></p>

<pre><code>&lt;mail-session jndi-name="java:jboss/mail/Default"&gt;
    &lt;smtp-server outbound-socket-binding-ref="mail-smtp"/&gt;
&lt;/mail-session&gt;
</code></pre>

<p></subsystem>
```</p>

<p>We're going to add another mail session / smtp server using GMail:</p>

<p>```xml
<subsystem xmlns="urn:jboss:domain:mail:1.0"></p>

<pre><code>...
&lt;mail-session jndi-name="java:/mail/Gmail" from="your.name@gmail.com"&gt;
    &lt;smtp-server ssl="true" outbound-socket-binding-ref="gmail-smtp"&gt;
        &lt;login name="your.name@gmail.com" password="..."/&gt;
    &lt;/smtp-server&gt;
&lt;/mail-session&gt;
</code></pre>

<p></subsystem>
```</p>

<p>Enter your credentials for the SMTP server you want to use. In case you have activated application specific passwords
in your Google profile, the password is not your Google password, but an application specific one you have to create
first.</p>

<p>As you can see we're referencing a named socket binding, which we're going to create now. Towards the end of the
standalone configuration you can see all configured socket bindings:</p>

<p>```xml
<socket-binding-group name="standard-sockets" default-interface="public" port-offset="0"></p>

<pre><code>&lt;socket-binding name="http" port="8080"/&gt;
&lt;socket-binding name="jacorb" interface="unsecure" port="3528"/&gt;
&lt;socket-binding name="jacorb-ssl" interface="unsecure" port="3529"/&gt;
&lt;socket-binding name="jgroups-tcp" port="7600"/&gt;
&lt;socket-binding name="management-native" interface="management" port="9999"/&gt;
&lt;socket-binding name="management-http" interface="management" port="9990"/&gt;
&lt;socket-binding name="messaging" port="5445"/&gt;
&lt;socket-binding name="messaging-throughput" port="5455"/&gt;
&lt;socket-binding name="osgi-http" interface="management" port="8090"/&gt;
&lt;socket-binding name="remoting" port="4447"/&gt;
&lt;socket-binding name="txn-recovery-environment" port="4712"/&gt;
&lt;socket-binding name="txn-status-manager" port="4713"/&gt;
&lt;outbound-socket-binding name="mail-smtp"&gt;
    &lt;remote-destination host="localhost" port="25"/&gt;
&lt;/outbound-socket-binding&gt;
</code></pre>

<p></socket-binding-group>
```</p>

<p>Add an outbound socket binding for you SMTP server:</p>

<p>```xml
<socket-binding-group name="standard-sockets" default-interface="public" port-offset="0"></p>

<pre><code>...
&lt;outbound-socket-binding name="gmail-smtp" source-port="0" fixed-source-port="false"&gt;
    &lt;remote-destination host="smtp.gmail.com" port="465"/&gt;
&lt;/outbound-socket-binding&gt;
</code></pre>

<p></socket-binding-group>
```</p>

<p>We're almost done! Now you can use the mail session in your application. In my case I'm using the mail session from an
<a href="http://www.jboss.org/errai">Errai</a> service, but any other server side class (REST endpoint, servlet, EJB, POJO) should
work also:</p>

<p>```java
import static javax.mail.Message.RecipientType.TO;</p>

<p>import java.util.Date;</p>

<p>import javax.annotation.Resource;
import javax.mail.Address;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;</p>

<p>import com.google.common.base.Optional;</p>

<p>import org.jboss.errai.bus.client.api.messaging.Message;
import org.jboss.errai.bus.client.api.messaging.MessageCallback;
import org.jboss.errai.bus.server.annotations.Service;
import org.jboss.errai.common.client.protocols.MessageParts;</p>

<p>@Service
public class FeedbackService implements MessageCallback {</p>

<pre><code>@Resource(mappedName = "java:/mail/Gmail") private Session mailSession;

@Override
public void callback(Message message) {

    // get data out of the message and persist feedback 
    String guest = Optional.fromNullable(message.get(String.class, "guest")).or("n/a");
    boolean commitment = Optional.fromNullable(message.get(Boolean.class, "commitment")).or(false);
    saveFeedback(guest, commitment);

    // send response using the Errai message bus
    // see http://docs.jboss.org/errai/2.4.0.Beta1/errai/reference/html_single/#sid-5931263 
    // for more details
    createConversation(message)
            .subjectProvided()
            .done()
            .reply();

    // sending the mail might take a moment, so this is done *after* sending the response to the client.
    sendMail(guest, commitment);
}

private void saveFeedback(final String guest, final boolean commitment) {
    ...
}

private void sendMail(final String guest, final boolean commitment) {
    try {
        MimeMessage message = new MimeMessage(mailSession);
        Address[] to = new InternetAddress[]{new InternetAddress("your.name@gmail.com")};
        message.setRecipients(TO, to);
        message.setSubject("Your subject");
        message.setContent("Your message", "text/plain");
        Transport.send(message);
    } catch (MessagingException e) {
        // error handling
    }
}
</code></pre>

<p>}
```</p>

<p>That's all - any feedback, thoughts and objections are welcome.</p>
]]></content>
  </entry>
  
</feed>
