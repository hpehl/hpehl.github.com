<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: console | Harald Pehl]]></title>
  <link href="http://hpehl.info/blog/categories/console/atom.xml" rel="self"/>
  <link href="http://hpehl.info/"/>
  <updated>2015-06-26T23:22:22+02:00</updated>
  <id>http://hpehl.info/</id>
  <author>
    <name><![CDATA[Harald Pehl]]></name>
    <email><![CDATA[harald.pehl@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Extending HAL Management Console]]></title>
    <link href="http://hpehl.info/extending-hal-management-console.html"/>
    <updated>2015-06-26T14:49:00+02:00</updated>
    <id>http://hpehl.info/extending-hal-management-console</id>
    <content type="html"><![CDATA[<p>The HAL management console provides the UI to configure almost any subsystem in WildFly. However for subsystems provided by 3rd party projects like <a href="http://picketlink.org/">PicketLink</a>, <a href="http://teiid.jboss.org/">Teiid</a> or <a href="http://keycloak.jboss.org/">Keycloak</a> there's no way to configure the management resources. This is where the HAL extensions come into play. They provide an easy way to extend the console and provide a frontend to configure the related subsystem. This blog post will walk through the process from creating an extension to including it in the HAL release stream.<!-- more --></p>

<h1>Background</h1>

<p>Before we start let me give you some technical background. The HAL management console is a GWT web application. It uses a maven build and depends mainly on <a href="https://code.google.com/p/google-gin/">GIN</a> for dependency injection and <a href="http://dev.arcbees.com/gwtp/">GWTP</a> for MVP. Extensions need to use the same stack and must create a maven artifact which is used by the <a href="https://github.com/hal/release-stream">HAL release stream</a> at <em>compile time</em>. As a result the final management console is produced. This means that the final console might contain many extensions. However the extensions will only show up if the relevant subsystem is part of WildFly. Furthermore since the console uses <a href="http://www.gwtproject.org/doc/latest/DevGuideCodeSplitting.html">code splitting</a> the extension's bits &amp; pieces will only be loaded on demand.</p>

<h1>Get Started</h1>

<p>As of today extensions need to be developed against HAL 2.8.0 or greater. This in turn requires WildFly 10.x as target platform. To get started quickly we provide a <a href="https://github.com/hal/archetypes/tree/master/subsystem-extension">maven archetype</a>. The archetype creates an extension with a presenter / view tuple to edit the top level attributes of a given subsystem.</p>

<p>Besides the regular maven coordinates like <code>groupId</code>, <code>artifactId</code> et al the archetypes uses the following parameters:</p>

<ul>
<li><code>extensionName</code>: The name / title of the extension as it appears in the UI. Should be a human friendly term which can contains spaces.</li>
<li><code>gwtModule</code> The name of the GWT module w/o the <code>.gwt.xml</code> suffix. Must not contain whitespace.</li>
<li><code>subsystem</code>: The name of the subsystem. The extension will only show up in the UI if the subsystem is configured in standalone mode or is part of the selected profile in domain mode.</li>
<li><code>nameToken</code>: An unique name token used to identify the extension's page in the UI. Should be an all lowercase string separated with dashes. Defaults to the subsystem name. See the <a href="http://dev.arcbees.com/gwtp/features/PlaceManager.html">GWTP documentation</a> for more infos about place management.</li>
</ul>


<p>The archetype is deployed to the <a href="https://repository.jboss.org/nexus/index.html#welcome">JBoss Maven Repository</a>. In order to use it, make sure to specify the catalog flag <code>-DarchetypeCatalog=https://repository.jboss.org</code>.</p>

<h2>Request Controller</h2>

<p>Let's say we want to develop an extension for the subsystem <code>request-comntroller</code>. This subsystem is used for request limiting and graceful shutdown and is currently not covered in the HAL management console. Open a shell and execute</p>

<p>```
mvn archetype:generate \</p>

<pre><code>-DarchetypeCatalog=https://repository.jboss.org \
-DarchetypeGroupId=org.jboss.hal.archetypes \
-DarchetypeArtifactId=hal-subsystem-extension-archetype
</code></pre>

<p>```</p>

<p>After providing all required parameters you should end up with a new maven project which consists of two sub modules:</p>

<ul>
<li><code>gui</code>: Contains the GWT code for the extension</li>
<li><code>app</code>: Provides a GWT module to run and test the extension</li>
</ul>


<p>Before we dive into the details, here's a preview of what the extension is going to look like in the navigation, read-only and edit mode:</p>

<p><figure class="centered"><img src="/images/posts/extension_1.png" title="&#34;Navigation&#34;" alt="&#34;Navigation&#34;"></figure>
<figure class="centered"><img src="/images/posts/extension_2.png" title="&#34;Read-only mode&#34;" alt="&#34;Read-only mode&#34;"></figure>
<figure class="centered"><img src="/images/posts/extension_3.png" title="&#34;Edit mode&#34;" alt="&#34;Edit mode&#34;"></figure></p>

<h1>Develop</h1>

<p>The development of the extension happens in the <code>gui</code> module. The archetype creates all necessary building blocks:</p>

<ul>
<li>a presenter / view tuple</li>
<li>the GIN / GWTP mixins</li>
<li>i18n helper classes</li>
</ul>


<h2>Presenter / View Tuple</h2>

<p>The GWTP presenter includes the proxy interface which carries the <code>@SubsystemExtension</code> annotation. This annotation marks the enclosing presenter as extension. The view interface defines one method to update the view with the subsystem data. Finally there are two methods to load and save the subsystem attributes.</p>

<p>```java
public class ExtensionPresenter</p>

<pre><code>    extends Presenter&lt;ExtensionPresenter.MyView, ExtensionPresenter.MyProxy&gt; {

public final static String ROOT_RESOURCE = "{selected.profile}/subsystem=request-controller";
public final static AddressTemplate ROOT_RESOURCE_ADDRESS = AddressTemplate.of(ROOT_RESOURCE);


@ProxyCodeSplit
@NameToken("request-controller")
@RequiredResources(resources = ROOT_RESOURCE)
@SearchIndex(keywords = {"request-controller"})
@SubsystemExtension(name = "Request Controller", group = "Extensions", key = "request-controller")
public interface MyProxy extends ProxyPlace&lt;ExtensionPresenter&gt; {}


public interface MyView extends View, HasPresenter&lt;ExtensionPresenter&gt; {
    void update(ModelNode data);
}


private final StatementContext statementContext;
private final DispatchAsync dispatcher;
private final CrudOperationDelegate operationDelegate;
private final I18n i18n;

@Inject
public ExtensionPresenter(final EventBus eventBus, final MyView view, final MyProxy proxy,
        final StatementContext statementContext, final DispatchAsync dispatcher, final I18n i18n) {
    super(eventBus, view, proxy, MainLayoutPresenter.TYPE_MainContent);
    this.statementContext = statementContext;
    this.dispatcher = dispatcher;
    this.i18n = i18n;
    this.operationDelegate = new CrudOperationDelegate(statementContext, dispatcher);
}

[...]

private void loadSubsystem() {
    Operation operation = new Operation.Builder(READ_RESOURCE_OPERATION,
            ROOT_RESOURCE_ADDRESS.resolve(statementContext)).build();
    dispatcher.execute(new DMRAction(operation), new SimpleCallback&lt;DMRResponse&gt;() {
        @Override
        public void onSuccess(final DMRResponse response) {
            ModelNode body = response.get();
            if (body.isFailure()) {
                Console.error(i18n.extensionConstants().load_failed(), body.getFailureDescription());
            } else {
                getView().update(body.get(RESULT));
            }
        }
    });
}

public void onSaveResource(final Map&lt;String, Object&gt; changedValues) {
    operationDelegate.onSaveResource(ROOT_RESOURCE_ADDRESS, null, changedValues,
            new CrudOperationDelegate.Callback() {
                @Override
                public void onFailure(final AddressTemplate addressTemplate, final String name, final Throwable t) {
                    Console.error(i18n.consoleMessages().modificationFailed("subsystem 'request-controller'"),
                            t.getMessage());
                }

                @Override
                public void onSuccess(final AddressTemplate addressTemplate, final String name) {
                    Console.info(i18n.consoleMessages().modified("subsystem 'request-controller'"));
                    loadSubsystem();
                }
            });
}
</code></pre>

<p>}
```</p>

<p>The view creates a form based on the subsystem metadata. When the user clicks save, control is delegated to the presenter which executes the relevant DMR operations to store the updated attributes in the management model.</p>

<p>```java
public class ExtensionView extends SuspendableViewImpl implements ExtensionPresenter.MyView {</p>

<pre><code>private final ResourceDescriptionRegistry descriptionRegistry;
private final SecurityFramework securityFramework;

private ExtensionPresenter presenter;
private ModelNodeForm form;

@Inject
public ExtensionView(final ResourceDescriptionRegistry descriptionRegistry,
        final SecurityFramework securityFramework) {
    this.securityFramework = securityFramework;
    this.descriptionRegistry = descriptionRegistry;
}

@Override
public Widget createWidget() {
    SecurityContext securityContext = securityFramework.getSecurityContext(presenter.getProxy().getNameToken());
    ResourceDescription resourceDescription = descriptionRegistry.lookup(
            ExtensionPresenter.ROOT_RESOURCE_ADDRESS);

    ModelNodeFormBuilder.FormAssets formAssets = new ModelNodeFormBuilder()
            .setConfigOnly()
            .setResourceDescription(resourceDescription)
            .setSecurityContext(securityContext)
            .build();

    form = formAssets.getForm();
    form.setToolsCallback(new FormCallback() {
        @Override
        public void onSave(Map changedValues) {
            presenter.onSaveResource(changedValues);
        }

        @Override
        public void onCancel(Object entity) {
            form.cancel();
        }
    });

    return new SimpleLayout()
            .setPlain(true)
            .setHeadline("Request Controller")
            .setDescription(SafeHtmlUtils.fromString(resourceDescription.get(DESCRIPTION).asString()))
            .addContent("Attributes", formAssets.asWidget())
            .build();
}

[...]

@Override
public void update(final ModelNode data) {
    form.edit(data);
}
</code></pre>

<p>}
```</p>

<h2>GIN / GWTP Mixins</h2>

<p>These mixins are needed to extend the dependency injection scope and wire up the presenters / view tuples. A mixin is declared both as a binding and model extension. The <code>@GinExtension</code> value refers the GWT module descriptor used with the extension.</p>

<p>The injection points:</p>

<p>```java
@GinExtension
public interface Extension {</p>

<pre><code>AsyncProvider&lt;ExtensionPresenter&gt; getExtensionPresenter();
</code></pre>

<p>}
```</p>

<p>The actual binding:</p>

<p>```java
@GinExtensionBinding
public class ExtensionBinding extends AbstractPresenterModule {</p>

<pre><code>@Override
protected void configure() {
    bindPresenter(ExtensionPresenter.class,
            ExtensionPresenter.MyView.class,
            ExtensionView.class,
            ExtensionPresenter.MyProxy.class);
}
</code></pre>

<p>}
```</p>

<h2>Helper Classes</h2>

<p>Finally the archetype creates some helper classes to deal with i18n constants and messages. It provides both access to HAL's constants and messages and to the resources defined by the extension:</p>

<p>```java
public class I18n {</p>

<pre><code>private final UIConstants consoleConstants;
private final UIMessages consoleMessages;
private final ExtensionConstants extensionConstants;
private final ExtensionMessages extensionMessages;

@Inject
public I18n(final UIConstants consoleConstants, final UIMessages consoleMessages,
        final ExtensionConstants extensionConstants, final ExtensionMessages extensionMessages) {
    this.consoleConstants = consoleConstants;
    this.consoleMessages = consoleMessages;
    this.extensionConstants = extensionConstants;
    this.extensionMessages = extensionMessages;
}

public UIConstants consoleConstants() {
    return consoleConstants;
}

public UIMessages consoleMessages() {
    return consoleMessages;
}

public ExtensionConstants extensionConstants() {
    return extensionConstants;
}

public ExtensionMessages extensionMessages() {
    return extensionMessages;
}
</code></pre>

<p>}
```</p>

<h1>Run</h1>

<p>To launch the extension, switch to the <code>app</code> directory and execute one of the following:</p>

<ul>
<li><code>mvn gwt:run</code> for GWT SuperDevMode</li>
<li><code>mvn gwt:run|debug -Dgwt.superDevMode=false</code> to use the old DevMode. Please note that you'll need <a href="http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/26.0/">Firefox &lt;= 26</a> and the <a href="http://www.gwtproject.org/missing-plugin/">GWT plugin</a> to use DevMode.</li>
</ul>


<p>You'll need a running WildFly instance which is configured to allow access from http://localhost:8888. Use one of the following CLI commands to configure the management endpoint:</p>

<ul>
<li><p>standalone mode:</p>

<pre><code>  /core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://localhost:8888)
  reload
</code></pre></li>
<li><p>domain mode:</p>

<pre><code>  /host=master/core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://localhost:8888)
  reload --host=master
</code></pre></li>
</ul>


<p>Please note that the extension will only show up in the UI if the subsystem is configured in standalone mode or is part of the selected profile in domain mode.</p>

<h1>Include</h1>

<p>The <a href="https://github.com/hal/release-stream">HAL release stream</a> is a maven build which combines different extensions at <em>compile time</em> and generates a final management console. You can clone its repository to test the build with your extension. Please contact us if you want to include your extension into the release stream.</p>

<h1>Resources</h1>

<p>Most of the topics in this blog post are also covered in the <a href="http://hal.gitbooks.io/dev/content/">official HAL documentation</a>. See the section <a href="http://hal.gitbooks.io/dev/content/building-blocks/extensions.html">Building Blocks / Extensions</a> for more details.</p>

<h1>It's your turn</h1>

<p>Now if you want to write your own extension, great - go ahead! If you have any questions or comments, please do not hesitate to <a href="http://hal.gitbooks.io/dev/content/community/index.html">contact</a> us.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JDBC Driver Setup]]></title>
    <link href="http://hpehl.info/jdbc-driver-setup.html"/>
    <updated>2015-06-07T16:20:00+02:00</updated>
    <id>http://hpehl.info/jdbc-driver-setup</id>
    <content type="html"><![CDATA[<p>The installation of JDBC drivers and the setup of (xa)datasources is a common task for every JEE developer and administrator. This post describes the installation and setup of a MySQL driver and datasource using WildFly 9 in both standalone and domain mode.<!-- more --> The setup assumes a running MySQL database called <code>test</code> on localhost. If you use another database, you'll probably go through the same steps, but using different parameters.</p>

<p> When installing a driver you basically have two options: install it as module or deploy it like any other application package. However when running domain mode you should choose to install the driver as module. Otherwise the driver won't be recognized by the <code>:installed-drivers-list</code> operation. Drivers deployed as application packages need a running server, which cannot be guaranteed in domain mode. Thus the recommendation is to <em>always</em> use the module option in domain mode. For standalone mode you are free to choose between module and deployment since both options will work.</p>

<h1>Install as Module</h1>

<ol>
<li>Download the driver from the <a href="https://dev.mysql.com/downloads/connector/j/">MySQL website</a></li>
<li>Go to <code>WILDFLY_HOME/modules/system/layers/base/com</code> and create the folder <code>mysql/main</code></li>
<li>Unzip the downloaded file and copy the file <code>mysql-connector-java-5.1.23-bin.jar</code> to the new folder <code>WILDFLY_HOME/modules/system/layers/base/com/mysql/main</code></li>
<li>Create the file <code>module.xml</code> in the same folder with the following content:</li>
</ol>


<p>```xml
<module xmlns="urn:jboss:module:1.3" name="com.mysql"></p>

<pre><code>&lt;resources&gt;
    &lt;resource-root path="mysql-connector-java-5.1.35-bin.jar"/&gt;
&lt;/resources&gt;
&lt;dependencies&gt;
    &lt;module name="javax.api"/&gt;
    &lt;module name="javax.transaction.api"/&gt;
&lt;/dependencies&gt;
</code></pre>

<p></module>
```</p>

<p>The name of the driver file may vary, so make sure you declare exactly the same name in the <code>resource-root</code> tag. After restarting WildFly the module is available and can be referenced to create a JDBC driver. Open the CLI and execute the following command for standalone mode:</p>

<p>```
[standalone@localhost:9990 /] /subsystem=datasources/jdbc-driver=mysql:add(\</p>

<pre><code>driver-name=mysql,\
driver-module-name=com.mysql,\
driver-class-name=com.mysql.jdbc.Driver,\
driver-xa-datasource-class-name=com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\
</code></pre>

<p>)
```</p>

<p>and this command if you're using domain mode:</p>

<p>```
[domain@localhost:9990 /] /profile=full/subsystem=datasources/jdbc-driver=mysql:add(\</p>

<pre><code>driver-name=mysql,\
driver-module-name=com.mysql,\
driver-class-name=com.mysql.jdbc.Driver,\
driver-xa-datasource-class-name=com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\
</code></pre>

<p>)
```</p>

<h1>Install as Deployment</h1>

<p>Please note that this option is only valid for JDBC4 compliant drivers. For none JDBC4 compliant drivers you should install the driver as a module. Furthermore it's not recommended for the domain mode.</p>

<ol>
<li>Download the driver from the <a href="https://dev.mysql.com/downloads/connector/j/">MySQL website</a></li>
<li>Unzip the downloaded file and deploy and enable the file <code>mysql-connector-java-5.1.23-bin.jar</code></li>
</ol>


<p>The contained JDBC drivers will be automatically detected and registered (no need to execute additional management operations).</p>

<h1>Setup a Datasource</h1>

<p>In order to setup a datasource open the management console and navigate to "Configuration / (Profile ...) / Datasources" and click "Add" to bring up the wizard for creating a (XA) datasource. The console already contains templates for the most common databases. The templates combine settings like connection url, validation checker and exception sorter implementations. Choose "MySQL Datasource" and adjust the settings as necessary. You should see the JDBC driver you've installed as module or deployment in the "JDBC Driver" step under "Detected Driver".</p>

<p>If you prefer to use the CLI to create the datasource use a command like this one (leave out <code>/profile=full</code> for standalone mode):</p>

<p>```
[domain@localhost:9990 /] /profile=full/subsystem=datasources/data-source=MySqlDS:add(\</p>

<pre><code>jndi-name=java:/MySqlDS,\
driver-name=mysql,\
connection-url=jdbc:mysql://localhost:3306/test
</code></pre>

<p>)
```</p>

<p>However please note that you have to configure database specific settings like validation checker et al by yourself.</p>

<h1>Use the Datasource</h1>

<p>When running domain mode, the datasource is always bound to a profile and thus accessible by servers which are part of a server group which in turn uses that profile.</p>

<p>To access the datasource in your JEE app, use the JNDI name. Here's an example of a JPA configuration:</p>

<p>```xml
<persistence-unit name="app-pu" transaction-type="JTA"></p>

<pre><code>&lt;jta-data-source&gt;java:/MySqlDS&lt;/jta-data-source&gt;
&lt;exclude-unlisted-classes&gt;false&lt;/exclude-unlisted-classes&gt;
&lt;properties/&gt;
</code></pre>

<p></persistence-unit>
```</p>

<p>and here an example for a resource injection:</p>

<p>```java
public class SomeClass {</p>

<pre><code>@Resource(name = "java:/MySqlDS")
private javax.sql.DataSource dataSource;
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updated management console in WildFly 9]]></title>
    <link href="http://hpehl.info/updated-management-console-in-wildfly-9.html"/>
    <updated>2015-03-16T22:44:00+01:00</updated>
    <id>http://hpehl.info/updated-management-console-in-wildfly-9</id>
    <content type="html"><![CDATA[<p>The upcoming WildFly 9 release will include an improved HAL management console based on the <a href="https://github.com/hal/core/tree/2.6.x">2.6.x branch</a> branch.</p>

<p>The improvements at a glance:</p>

<ul>
<li>New subsystem configuration: Remoting</li>
<li>Support for datasource templates.</li>
<li>Provide all flush-* operations for connection pools</li>
<li>Improved log viewer</li>
<li>Enhanced model browser</li>
<li>Get more details about applied patches</li>
<li>Standalone console</li>
</ul>


<!-- More -->


<h1>Remoting subsystem</h1>

<p>The remoting subsystem was added to the console. You can now configure remote (http) connectors and outbound connections.</p>

<p><figure class="centered"><img src="/images/posts/remoting_subsystem.png" title="Remoting subsystem" ></figure></p>

<h1>Datasource Templates</h1>

<p>The management console provides for the datasource most commonly used templates with reasonable default settings. These presets include JNDI names, driver settings, datasource properties and highly specific options like validation checkers and exception sorters.</p>

<p><figure class="centered"><img src="/images/posts/datasource_templates.png" title="Datasource templates" ></figure></p>

<h1>Improved Log Viewer</h1>

<p>WildFly 8.2 featured a log viewer which allowed you to browse through or tail server logs. Now you can view the log file as a whole in the console and search for specific text. Optionally you can download the full log file and open it in an external editor of your choice.</p>

<p><figure class="centered"><img src="/images/posts/improved_log_viewer.png" title="Improved log viewer" ></figure></p>

<h1>Standalone Console</h1>

<p>Starting with WildFly 9 and <a href="http://hal.gitbooks.io/dev/content/release-coordination/versions/2.6.5.Final.html">HAL 2.6.5.Final</a> the management console can be launched independently from WildFly. Take a look at my <a href="/standalone-management-console.html">last post</a> for more details.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Standalone Management Console]]></title>
    <link href="http://hpehl.info/standalone-management-console.html"/>
    <updated>2015-03-16T16:00:00+01:00</updated>
    <id>http://hpehl.info/standalone-management-console</id>
    <content type="html"><![CDATA[<p>Back in 2013 I wrote about an idea to have an <a href="/independent-jboss-admin-console.html">independent management console</a> which can connect to arbitrary servers. Starting with WildFly 9 we finally have the technical prerequisites to ship such a console. In this blog post I will describe how to configure and launch an independent management console.<!-- more --></p>

<p>As you might know the management console is developed using GWT and compiles down to a bunch of HTML, JavaScript and CSS files. Until now these artifacts were a fixed module of each WildFly version. WildFly serves the console and the console talks to the same origin it was loaded from. This still holds true.</p>

<p>However starting with WildFly 9 the HTTP endpoint for the management interface supports the configuration of so-called allowed origins. This list - which is empty by default - contains URLs which are allowed to access the management interface (see http://en.wikipedia.org/wiki/Cross-origin_resource_sharing for more details). This setup is necessary to cope with the <a href="http://en.wikipedia.org/wiki/Same_origin_policy">same origin policy</a> (SOP) when the console is served from origin A, but talks to the management interface at origin B.</p>

<p>Equipped with these features we can now launch the management console from any URL and connect to any management interface which has this URL configured as an allowed origin. To make things simple, we've setup an <a href="http://access-halproject.rhcloud.com/">HAL build proxy</a> on OpenShift. This proxy is able to fetch any console version from the public JBoss maven repository and serve it using a distinct URL. It offers a list of simple HTTP endpoints:</p>

<ul>
<li><p><code>/latest</code><br/>
Displays the version of the latest HAL release<br/>
http://access-halproject.rhcloud.com/latest</p></li>
<li><p><code>/releases</code><br/>
Gets the list of supported HAL releases (w/o snapshots)<br/>
http://access-halproject.rhcloud.com/releases</p></li>
<li><p><code>/release/:version</code><br/>
Serves a specific HAL version (only works with version > 2.6.x)<br/>
http://access-halproject.rhcloud.com/release/2.6.5.Final</p></li>
<li><p><code>/snapshot/:version</code><br/>
Serves a specific HAL snapshot (only works with version > 2.6.x)<br/>
http://access-halproject.rhcloud.com//snapshot/2.7.0-SNAPSHOT</p></li>
</ul>


<p>If you don't want to use the prebuilt proxy on OpenShift, you can also checkout the source code and run your own build proxy:</p>

<ol>
<li>Clone the registry from https://github.com/hal/mvn-repo-server</li>
<li>Build the proxy with Maven: <code>mvn clean package</code> (requires Java 8)</li>
<li>Start the proxy: <code>java -jar target/server-jar-with-dependencies.jar</code> (by default port 8080 is used)</li>
<li>Open http://localhost:8080/</li>
</ol>


<h1>Allowed Origins Setup</h1>

<p>Whether you use the prebuilt proxy on OpenShift or build your own, you have to add the URL of the standalone console to the list of allowed origins. Depending on the operation mode use one of the following CLI commands:</p>

<ul>
<li><p>standalone mode:</p>

<pre><code>  /core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://access-halproject.rhcloud.com)
  reload
</code></pre></li>
<li><p>domain mode:</p>

<pre><code>  /host=master/core-service=management/management-interface=http-interface:list-add(name=allowed-origins,value=http://access-halproject.rhcloud.com)
  reload --host=master
</code></pre></li>
</ul>


<h1>Console Configuration</h1>

<p>When you open the console it detects whether it is part of a WildFly instance or launched independently. In the latter case you need to specify a management interface you like to connect to. You can manage a list of different interfaces running on different WildFly instances. The configuration is stored in the browser's local storage, so it's available the next time you open the console.</p>

<p>Say you want access your local WildFly instance using the HAL management console 2.6.5.Final served from the build proxy. In order to do so, follow these steps:</p>

<ol>
<li><p>Point your browser to http://access-halproject.rhcloud.com/release/2.6.5.Final</p></li>
<li><p>Click 'Add' to configure a management endpoint.<br/>
<img src="/images/posts/bootstrap_server_select_0.png" alt="Connect to Management Interface" /></p></li>
<li><p>Add the hostname and port of you local WildFly instance. You can verify your settings using 'Ping'.<br/>
<img src="/images/posts/bootstrap_server_select_1.png" alt="Connect to Management Interface" /></p></li>
<li><p>Click 'Connect' to finish.<br/>
<img src="/images/posts/bootstrap_server_select_2.png" alt="Connect to Management Interface" /></p></li>
</ol>


<p>You can use an existing configuration using the <code>connect</code> query parameter. For the above example this url is a shortcut and will skip the bootstrap dialogs: http://access-halproject.rhcloud.com/2.6.5.Final/App.html?connect=local</p>

<h1>Outlook</h1>

<p>In the future we'd like to use the new distribution model to provide different console versions with different feature sets (nightly, beta, stable). This gives us a way to share new features with the community as soon as possible and to get feedback earlier on.</p>

<h1>Limitations and Known Problems</h1>

<p>When using the standalone console there are some pitfalls and preconditions you should be aware of:</p>

<ul>
<li>The standalone console can only connect to WildFly 9.x and above.</li>
<li>Make sure to configure the allowed origins before connecting from the standalone console.</li>
<li>Don't use different schemes (https and http) for the standalone console and the WildFly instance you want to connect to.</li>
<li>In rare cases it might be necessary to clear the cache or use the browser's private mode when switching between different WildFly instances.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Local Search in the Management Console]]></title>
    <link href="http://hpehl.info/search_in_console.html"/>
    <updated>2014-11-21T10:21:00+01:00</updated>
    <id>http://hpehl.info/search_in_console</id>
    <content type="html"><![CDATA[<p>Today <a href="http://wildfly.org/news/2014/11/20/WildFly82-Final-Released/">WildFly 8.2.0.Final</a> was released. It comes with a number of improvements and bug fixes over the last release, 8.1.0.Final. Regarding the management console, Heiko Braun already gave a glimpse of some of new features in his recent <a href="http://hbraun.info/2014/10/updated-management-console-in-wildfly-8-2/">blog post</a>. Today I'd like to introduce yet another feature which was introduced in WildFyl 8.2: Local Search.<!-- more --></p>

<p>With every new feature added to WildFly, the number of screens and options in the management console grows as well. Sometimes it's hard to quickly find the right screen where you can modify your JMS topics or monitor that data source connection pool. That's why we added a search feature to the management console. It's built around the idea to have an index which contains reasonable keywords and the descriptions from the underlying <a href="http://wildscribe.github.io/">management model</a>.</p>

<p>It's super fast, because the index is built and stored locally inside the browser. That's why you need a modern browser with support for <a href="http://caniuse.com/#search=localstorage">local storage</a> to use the search. Don't worry about the size of the index, it's quite compact: For WildFly 8.2 running in domain mode the index will be roughly 10 KByte large, so it's no a big deal to keep the index in local storage. For those who want to know all the nitty-gritty details, the local search is based on the JavaScript framework <a href="http://lunrjs.com/">lunr.js</a>. In a nutshell lunr.js is slimmed full-text search engine ready to be used in your browser. But enough with all these implementation details. Let's see how this all works:</p>

<p>To enter the search press the search link in the upper right corner of the management console:</p>

<p><figure class="centered"><img src="/images/posts/local_search_header.png" title="Local Search" ></figure></p>

<p>The first time you enter the search, the index is automatically created based on the WildFly version, the operation mode (standalone or domain) and the language. During index creation the descriptions of the management model is fetched from the server side and stored in the index. Depending on your setup and network latency this make take a few seconds.</p>

<p><figure class="centered"><img src="/images/posts/local_search_index_setup.png" title="Indexing..." ></figure></p>

<p>Once the index is ready you can start searching. As you type your query the results will update dynamically:</p>

<iframe width="420" height="315" src="https://www.youtube.com/embed/wdb3W-G-9WI" frameborder="0" allowfullscreen></iframe>




<br/>


<p>Give the new local search a try and let us know what you think!</p>
]]></content>
  </entry>
  
</feed>
