<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Harald Pehl]]></title>
  <link href="http://hpehl.info/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://hpehl.info/"/>
  <updated>2013-05-24T10:29:08+02:00</updated>
  <id>http://hpehl.info/</id>
  <author>
    <name><![CDATA[Harald Pehl]]></name>
    <email><![CDATA[harald.pehl@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google AppEngine, Restlet & Security]]></title>
    <link href="http://hpehl.info/google-appengine-restlet-security.html"/>
    <updated>2009-11-24T17:06:00+01:00</updated>
    <id>http://hpehl.info/google-appengine-restlet-security</id>
    <content type="html"><![CDATA[<p>I was wondering how to secure the resources in my current application. The application is deployed on the Google
AppEngine and uses <a href="https://code.google.com/p/google-guice/">Guice 2.0</a> and <a href="http://www.restlet.org">Restlet 2.0</a>.
Inspired by the post from <a href="http://turbomanage.wordpress.com/2009/10/07/calling-appengine-securely-from-gwt-with-gwt-dispatch/">David M. Chandler</a> I
decided to use the AppEngine cookie named "ACSID" as a token in each and every url to secure my resources. This way
the url to the "projects" resource becomes http://karaka-d8.appspot.com/rest/v1/&lt;ACSID>/projects.<!-- more --></p>

<p>Technically I'm using an aspect together with a custom annotation to secure the resources. Here's the Guice module for
the security stuff:</p>

<p>``` java
public class SecurityModule extends AbstractModule
{</p>

<pre><code>@Override
protected void configure()
{
    SecurityInterceptor interceptor = new SecurityInterceptor();
    bindInterceptor(Matchers.subclassesOf(ServerResource.class), Matchers.annotatedWith(Secured.class), interceptor);
}
</code></pre>

<p>}
```</p>

<p>With the above setup all methodes in subclasses of ServerResource which are annotated with the custom @Secured
annotation are handled by the SecurityInterceptor. This class contains the logic to check whether there's a
authenticated user and whether the session cookie is correct (that's essentially the code from
<a href="http://turbomanage.wordpress.com/2009/10/07/calling-appengine-securely-from-gwt-with-gwt-dispatch/">David M. Chandlers post</a>)</p>

<p>``` java
public class SecurityInterceptor implements MethodInterceptor
{</p>

<pre><code>private static final String APPENGINE_COOKIE = "ACSID";

@Override
public Object invoke(MethodInvocation invocation) throws Throwable
{
    UserService userService = UserServiceFactory.getUserService();
    User user = userService.getCurrentUser();
    if (user == null)
    {
        throw new SecurityException("No user");
    }

    ServerResource resource = (ServerResource) invocation.getThis();
    String token = (String) resource.getRequest().getAttributes().get("token");
    if (token == null || token.length() == 0)
    {
        throw new SecurityException("No security token");
    }

    // Skip check on localhost so we can test in AppEngine local dev env
    String sessionId = findSessionId(resource);
    String serverName = resource.getReference().getHostDomain();
    if (!("localhost".equals(serverName)) &amp;amp;&amp;amp; !(token.equals(sessionId)))
    {
        throw new SecurityException("Security token invalid");
    }

    return invocation.proceed();
}

private String findSessionId(ServerResource resource)
{
    String result = null;
    Series&amp;lt;Cookie&amp;gt; cookies = resource.getCookies();
    for (Cookie cookie : cookies)
    {
        if (APPENGINE_COOKIE.equals(cookie.getName()))
        {
            result = cookie.getValue();
            break;
        }
    }
    return result;
}
</code></pre>

<p>}
```</p>

<p>To make this work the resource mappings have to include a {token} parameter. So inside your Router you should have
something like that</p>

<p><code>java
attach("/{token}/projects", ProjectsResource.class);
</code></p>

<p>Finally the methods you want to protect have to be annotated with the @Secured annotation:</p>

<p>``` java
public class ProjectsResource extends ServerResource
{</p>

<pre><code>private final ProjectService service;
private final TemplateConverter converter;

@Inject
public ProjectsResource(ProjectService service, TemplateConverter converter)
{
    this.service = service;
    this.converter = converter;
}

@Secured
@Override
protected Representation get()
{
    Context context = new Context();
    context.set("projects", service.list());
    String xml = converter.convert("templates/projects.vm", context);
    return new StringRepresentation(xml, MediaType.TEXT_XML);
}
</code></pre>

<p>}
```</p>

<p>One last note: First I tried to use the @Get annotation from Restlet 2.0 instead of a custom annotation and configured
the SecurityInterceptor as follows:</p>

<p><code>java
bindInterceptor(Matchers.subclassesOf(ServerResource.class), Matchers.annotatedWith(Get.class), interceptor);
</code></p>

<p>Unfortunately that didn't work because the @Get annotation is not available in the generated AOP proxy. So Restlet
has no way to figure out what method to call for a GET request. Instead you have to override the get method.</p>
]]></content>
  </entry>
  
</feed>
